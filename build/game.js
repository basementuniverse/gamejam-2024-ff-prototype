/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@basementuniverse/camera/build/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@basementuniverse/camera/build/index.js ***!
  \**************************************************************/
/***/ ((module) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else { var i, a; }
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@basementuniverse/utils/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@basementuniverse/utils/utils.js ***!
  \*******************************************************/
/***/ ((module) => {

/**
 * @overview A library of useful functions
 * @author Gordon Larrigan
 */

/**
 * Check if two numbers are approximately equal
 * @param {number} a Number a
 * @param {number} b Number b
 * @param {number} [p=Number.EPSILON] The precision value
 * @return {boolean} True if numbers a and b are approximately equal
 */
const floatEquals = (a, b, p = Number.EPSILON) => Math.abs(a - b) < p;

/**
 * Clamp a number between min and max
 * @param {number} a The number to clamp
 * @param {number} [min=0] The minimum value
 * @param {number} [max=1] The maximum value
 * @return {number} A clamped number
 */
const clamp = (a, min = 0, max = 1) => a < min ? min : (a > max ? max : a);

/**
 * Get the fractional part of a number
 * @param {number} a The number from which to get the fractional part
 * @return {number} The fractional part of the number
 */
const frac = a => a >= 0 ? a - Math.floor(a) : a - Math.ceil(a);

/**
 * Do a linear interpolation between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value, should be in the interval [0, 1]
 * @return {number} An interpolated value in the interval [a, b]
 */
const lerp = (a, b, i) => a + (b - a) * i;

/**
 * Get the position of i between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolated value in the interval [a, b]
 * @return {number} The position of i between a and b
 */
const unlerp = (a, b, i) => (i - a) / (b - a);

/**
 * Do a bilinear interpolation
 * @param {number} c00 Top-left value
 * @param {number} c10 Top-right value
 * @param {number} c01 Bottom-left value
 * @param {number} c11 Bottom-right value
 * @param {number} ix Interpolation value along x
 * @param {number} iy Interpolation value along y
 * @return {number} A bilinear interpolated value
 */
const blerp = (c00, c10, c01, c11, ix, iy) => lerp(lerp(c00, c10, ix), lerp(c01, c11, ix), iy);

/**
 * Re-map a number i from range a1...a2 to b1...b2
 * @param {number} i The number to re-map
 * @param {number} a1
 * @param {number} a2
 * @param {number} b1
 * @param {number} b2
 * @return {number}
 */
const remap = (i, a1, a2, b1, b2) => b1 + (i - a1) * (b2 - b1) / (a2 - a1);

/**
 * Do a smooth interpolation between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value
 * @return {number} An interpolated value in the interval [a, b]
 */
const smoothstep = (a, b, i) => lerp(a, b, 3 * Math.pow(i, 2) - 2 * Math.pow(i, 3));

/**
 * Get an angle in radians
 * @param {number} degrees The angle in degrees
 * @return {number} The angle in radians
 */
const radians = degrees => (Math.PI / 180) * degrees;

/**
 * Get an angle in degrees
 * @param {number} radians The angle in radians
 * @return {number} The angle in degrees
 */
const degrees = radians => (180 / Math.PI) * radians;

/**
 * Get a random float in the interval [min, max)
 * @param {number} min Inclusive min
 * @param {number} max Exclusive max
 * @return {number} A random float in the interval [min, max)
 */
const randomBetween = (min, max) => Math.random() * (max - min) + min;

/**
 * Get a random integer in the interval [min, max]
 * @param {number} min Inclusive min
 * @param {number} max Inclusive max
 * @return {number} A random integer in the interval [min, max]
 */
const randomIntBetween = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

/**
 * Get a normally-distributed random number
 * @param {number} [mu=0.5] The mean value
 * @param {number} [sigma=0.5] The standard deviation
 * @param {number} [samples=2] The number of samples
 * @return {number} A normally-distributed random number
 */
const cltRandom = (mu = 0.5, sigma = 0.5, samples = 2) => {
  let total = 0;
  for (let i = samples; i--;) {
    total += Math.random();
  }
  return mu + (total - samples / 2) / (samples / 2) * sigma;
};

/**
 * Get a normally-distributed random integer in the interval [min, max]
 * @param {number} min Inclusive min
 * @param {number} max Inclusive max
 * @return {number} A normally-distributed random integer
 */
const cltRandomInt = (min, max) => Math.floor(min + cltRandom(0.5, 0.5, 2) * (max + 1 - min));

/**
 * Return a weighted random integer
 * @param {Array<number>} w An array of weights
 * @return {number} An index from w
 */
const weightedRandom = w => {
  let total = w.reduce((a, i) => a + i, 0), n = 0;
  const r = Math.random() * total;
  while (total > r) {
    total -= w[n++];
  }
  return n - 1;
};

/**
 * An interpolation function
 * @callback interpolationCallback
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value, should be in the interval [0, 1]
 * @return {number} The interpolated value in the interval [a, b]
 */

/**
 * Return an interpolated value from an array
 * @param {Array<number>} a An array of values interpolate
 * @param {number} i A number in the interval [0, 1]
 * @param {interpolationCallback} [f=Math.lerp] The interpolation function to use
 * @return {number} An interpolated value in the interval [min(a), max(a)]
 */
const lerpArray = (a, i, f = lerp) => {
  const s = i * (a.length - 1);
  const p = clamp(Math.trunc(s), 0, a.length - 1);
  return f(a[p] || 0, a[p + 1] || 0, frac(s));
};

/**
 * Get the dot product of two vectors
 * @param {Array<number>} a Vector a
 * @param {Array<number>} b Vector b
 * @return {number} a âˆ™ b
 */
const dot = (a, b) => a.reduce((n, v, i) => n + v * b[i], 0);

/**
 * Get the factorial of a number
 * @param {number} a
 * @return {number} a!
 */
const factorial = a => {
  let result = 1;
  for (let i = 2; i <= a; i++) {
    result *= i;
  }
  return result;
};

/**
 * Get the number of permutations of r elements from a set of n elements
 * @param {number} n
 * @param {number} r
 * @return {number} nPr
 */
const permutation = (n, r) => factorial(n) / factorial(n - r);

/**
 * Get the number of combinations of r elements from a set of n elements
 * @param {number} n
 * @param {number} r
 * @return {number} nCr
 */
const combination = (n, r) => factorial(n) / (factorial(r) * factorial(n - r));

/**
 * A function for generating array values
 * @callback timesCallback
 * @param {number} i The array index
 * @return {*} The array value
 */

/**
 * Return a new array with length n by calling function f(i) on each element
 * @param {timesCallback} f
 * @param {number} n The size of the array
 * @return {Array<*>}
 */
const times = (f, n) => Array(n).fill(0).map((_, i) => f(i));

/**
 * Return an array containing numbers 0->(n - 1)
 * @param {number} n The size of the array
 * @return {Array<number>} An array of integers 0->(n - 1)
 */
const range = n => times(i => i, n);

/**
 * Zip 2 arrays together, i.e. ([1, 2, 3], [a, b, c]) => [[1, a], [2, b], [3, c]]
 * @param {Array<*>} a
 * @param {Array<*>} b
 * @return {Array<Array<*>>}
 */
const zip = (a, b) => a.map((k, i) => [k, b[i]]);

/**
 * Return array[i] with positive and negative wrapping
 * @param {Array<*>} a
 * @param {number} i The positively/negatively wrapped array index
 * @return {*} An element from the array
 */
const at = (a, i) => a[i < 0 ? a.length - (Math.abs(i + 1) % a.length) - 1 : i % a.length];

/**
 * Chop an array into chunks of size n
 * @param {Array<*>} a
 * @param {number} n The chunk size
 * @return {Array<Array<*>>} An array of array chunks
 */
const chunk = (a, n) => times(i => a.slice(i * n, i * n + n), Math.ceil(a.length / n));

/**
 * Randomly shuffle a shallow copy of an array
 * @param {Array<*>} a
 * @return {Array<*>} The shuffled array
 */
const shuffle = a => a.slice().sort(() => Math.random() - 0.5);

if (true) {
  module.exports = {
    floatEquals,
    clamp,
    frac,
    lerp,
    unlerp,
    blerp,
    remap,
    smoothstep,
    radians,
    degrees,
    randomBetween,
    randomIntBetween,
    cltRandom,
    cltRandomInt,
    weightedRandom,
    lerpArray,
    dot,
    factorial,
    permutation,
    combination,
    times,
    range,
    zip,
    at,
    chunk,
    shuffle,
  };
}


/***/ }),

/***/ "./node_modules/@basementuniverse/vec/vec.js":
/*!***************************************************!*\
  !*** ./node_modules/@basementuniverse/vec/vec.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_9135__) => {

const { times, chunk, dot } = __nested_webpack_require_9135__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");

/**
 * @overview A library of useful functions
 * @author Gordon Larrigan
 */

/**
 * A 2d vector
 * @typedef {Object} vec
 * @property {number} x The x component of the vector
 * @property {number} y The y component of the vector
 */

/**
 * Create a new vector
 * @param {number|vec} [x] The x component of the vector, or a vector to copy
 * @param {number} [y] The y component of the vector
 * @return {vec} A new vector
 * @example <caption>Various ways to initialise a vector</caption>
 * let a = vec(3, 2);  // (3, 2)
 * let b = vec(4);     // (4, 4)
 * let c = vec(a);     // (3, 2)
 * let d = vec();      // (0, 0)
 */
const vec = (x, y) => (!x && !y ?
  { x: 0, y: 0 } : (typeof x === 'object' ?
    { x: x.x || 0, y: x.y || 0 } : (y === null || y === undefined ?
      { x: x, y: x } : { x: x, y: y })
  )
);

/**
 * Get the components of a vector as an array
 * @param {vec} a The vector to get components from
 * @return {Array<number>} The vector components as an array
 */
vec.components = a => [a.x, a.y];

/**
 * Return a unit vector (1, 0)
 * @return {vec} A unit vector (1, 0)
 */
vec.ux = () => vec(1, 0);

/**
 * Return a unit vector (0, 1)
 * @return {vec} A unit vector (0, 1)
 */
vec.uy = () => vec(0, 1);

/**
 * Add vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {vec} a + b
 */
vec.add = (a, b) => ({ x: a.x + b.x, y: a.y + b.y });

/**
 * Scale a vector
 * @param {vec} a Vector a
 * @param {number} b Scalar b
 * @return {vec} a * b
 */
vec.mul = (a, b) => ({ x: a.x * b, y: a.y * b });

/**
 * Subtract vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {vec} a - b
 */
vec.sub = (a, b) => ({ x: a.x - b.x, y: a.y - b.y });

/**
 * Get the length of a vector
 * @param {vec} a Vector a
 * @return {number} |a|
 */
vec.len = a => Math.sqrt(a.x * a.x + a.y * a.y);

/**
 * Get the length of a vector using taxicab geometry
 * @param {vec} a Vector a
 * @return {number} |a|
 */
vec.manhattan = a => Math.abs(a.x) + Math.abs(a.y);

/**
 * Normalise a vector
 * @param {vec} a The vector to normalise
 * @return {vec} ^a
 */
vec.nor = a => {
  let len = vec.len(a);
  return len ? { x: a.x / len, y: a.y / len } : vec();
};

/**
 * Get a dot product of vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {number} a âˆ™ b
 */
vec.dot = (a, b) => a.x * b.x + a.y * b.y;

/**
 * Rotate a vector by r radians
 * @param {vec} a The vector to rotate
 * @param {number} r The angle to rotate by, measured in radians
 * @return {vec} A rotated vector
 */
vec.rot = (a, r) => {
  let s = Math.sin(r),
    c = Math.cos(r);
  return { x: c * a.x - s * a.y, y: s * a.x + c * a.y };
}

/**
 * Check if two vectors are equal
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {boolean} True if vectors a and b are equal, false otherwise
 */
vec.eq = (a, b) => a.x === b.x && a.y === b.y;

/**
 * Get the angle of a vector
 * @param {vec} a Vector a
 * @return {number} The angle of vector a in radians
 */
vec.rad = a => Math.atan2(a.y, a.x);

/**
 * Copy a vector
 * @param {vec} a The vector to copy
 * @return {vec} A copy of vector a
 */
vec.cpy = a => vec(a);

/**
 * A function to call on each component of a vector
 * @callback vectorMapCallback
 * @param {number} value The component value
 * @param {'x' | 'y'} label The component label (x or y)
 * @return {number} The mapped component
 */

/**
 * Call a function on each component of a vector and build a new vector from the results
 * @param {vec} a Vector a
 * @param {vectorMapCallback} f The function to call on each component of the vector
 * @return {vec} Vector a mapped through f
 */
vec.map = (a, f) => ({ x: f(a.x, 'x'), y: f(a.y, 'y') });

/**
 * Convert a vector into a string
 * @param {vec} a The vector to convert
 * @param {string} [s=', '] The separator string
 * @return {string} A string representation of the vector
 */
vec.str = (a, s = ', ') => `${a.x}${s}${a.y}`;

/**
 * A matrix
 * @typedef {Object} mat
 * @property {number} m The number of rows in the matrix
 * @property {number} n The number of columns in the matrix
 * @property {Array<number>} entries The matrix values
 */

/**
 * Create a new matrix
 * @param {number} [m=4] The number of rows
 * @param {number} [n=4] The number of columns
 * @param {Array<number>} [entries=[]] Matrix values in reading order
 * @return {mat} A new matrix
 */
const mat = (m = 4, n = 4, entries = []) => ({
  m, n,
  entries: entries.concat(Array(m * n).fill(0)).slice(0, m * n)
});

/**
 * Get an identity matrix of size n
 * @param {number} n The size of the matrix
 * @return {mat} An identity matrix
 */
mat.identity = n => mat(n, n, Array(n * n).fill(0).map((v, i) => +(Math.floor(i / n) === i % n)));

/**
 * Get an entry from a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @return {number} The value at position (i, j) in matrix a
 */
mat.get = (a, i, j) => a.entries[(j - 1) + (i - 1) * a.n];

/**
 * Set an entry of a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @param {number} v The value to set in matrix a
 */
mat.set = (a, i, j, v) => { a.entries[(j - 1) + (i - 1) * a.n] = v; };

/**
 * Get a row from a matrix as an array
 * @param {mat} a Matrix a
 * @param {number} m The row offset
 * @return {Array<number>} Row m from matrix a
 */
mat.row = (a, m) => {
  const s = (m - 1) * a.n;
  return a.entries.slice(s, s + a.n);
};

/**
 * Get a column from a matrix as an array
 * @param {mat} a Matrix a
 * @param {number} n The column offset
 * @return {Array<number>} Column n from matrix a
 */
mat.col = (a, n) => times(i => mat.get(a, (i + 1), n), a.m);

/**
 * Add matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat} a + b
 */
mat.add = (a, b) => a.m === b.m && a.n === b.n && mat.map(a, (v, i) => v + b.entries[i]);

/**
 * Subtract matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat} a - b
 */
mat.sub = (a, b) => a.m === b.m && a.n === b.n && mat.map(a, (v, i) => v - b.entries[i]);

/**
 * Multiply matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat|boolean} ab or false if the matrices cannot be multiplied
 */
mat.mul = (a, b) => {
  if (a.n !== b.m) { return false; }
  const result = mat(a.m, b.n);
  for (let i = 1; i <= a.m; i++) {
    for (let j = 1; j <= b.n; j++) {
      mat.set(result, i, j, dot(mat.row(a, i), mat.col(b, j)));
    }
  }
  return result;
};

/**
 * Scale a matrix
 * @param {mat} a Matrix a
 * @param {number} b Scalar b
 * @return {mat} a * b
 */
mat.scale = (a, b) => mat.map(a, v => v * b);

/**
 * Transpose a matrix
 * @param {mat} a The matrix to transpose
 * @return {mat} A transposed matrix
 */
mat.trans = a => mat(a.n, a.m, times(i => mat.col(a, (i + 1)), a.n).flat());

/**
 * Get the minor of a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @return {mat|boolean} The (i, j) minor of matrix a or false if the matrix is not square
 */
mat.minor = (a, i, j) => {
  if (a.m !== a.n) { return false; }
  const entries = [];
  for (let ii = 1; ii <= a.m; ii++) {
    if (ii === i) { continue; }
    for (let jj = 1; jj <= a.n; jj++) {
      if (jj === j) { continue; }
      entries.push(mat.get(a, ii, jj));
    }
  }
  return mat(a.m - 1, a.n - 1, entries);
};

/**
 * Get the determinant of a matrix
 * @param {mat} a Matrix a
 * @return {number|boolean} |a| or false if the matrix is not square
 */
mat.det = a => {
  if (a.m !== a.n) { return false; }
  if (a.m === 1) {
    return a.entries[0];
  }
  if (a.m === 2) {
    return a.entries[0] * a.entries[3] - a.entries[1] * a.entries[2];
  }
  let total = 0, sign = 1;
  for (let j = 1; j <= a.n; j++) {
    total += sign * a.entries[j - 1] * mat.det(mat.minor(a, 1, j));
    sign *= -1;
  }
  return total;
};

/**
 * Normalise a matrix
 * @param {mat} a The matrix to normalise
 * @return {mat|boolean} ^a or false if the matrix is not square
 */
mat.nor = a => {
  if (a.m !== a.n) { return false; }
  const d = mat.det(a);
  return mat.map(a, i => i * d);
};

/**
 * Get the adjugate of a matrix
 * @param {mat} a The matrix from which to get the adjugate
 * @return {mat} The adjugate of a
 */
mat.adj = a => {
  const minors = mat(a.m, a.n);
  for (let i = 1; i <= a.m; i++) {
    for (let j = 1; j <= a.n; j++) {
      mat.set(minors, i, j, mat.det(mat.minor(a, i, j)));
    }
  }
  const cofactors = mat.map(minors, (v, i) => v * (i % 2 ? -1 : 1));
  return mat.trans(cofactors);
};

/**
 * Get the inverse of a matrix
 * @param {mat} a The matrix to invert
 * @return {mat|boolean} a^-1 or false if the matrix has no inverse
 */
mat.inv = a => {
  if (a.m !== a.n) { return false; }
  const d = mat.det(a);
  if (d === 0) { return false; }
  return mat.scale(mat.adj(a), 1 / d);
};

/**
 * Check if two matrices are equal
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {boolean} True if matrices a and b are identical, false otherwise
 */
mat.eq = (a, b) => a.m === b.m && a.n === b.n && mat.str(a) === mat.str(b);

/**
 * Copy a matrix
 * @param {mat} a The matrix to copy
 * @return {mat} A copy of matrix a
 */
mat.cpy = a => mat(a.m, a.n, [...a.entries]);

/**
 * A function to call on each entry of a matrix
 * @callback matrixMapCallback
 * @param {number} value The entry value
 * @param {number} index The entry index
 * @param {Array<number>} entries The array of matrix entries
 * @return {number} The mapped entry
 */

/**
 * Call a function on each entry of a matrix and build a new matrix from the results
 * @param {mat} a Matrix a
 * @param {matrixMapCallback} f The function to call on each entry of the matrix
 * @return {mat} Matrix a mapped through f
 */
mat.map = (a, f) => mat(a.m, a.n, a.entries.map(f));

/**
 * Convert a matrix into a string
 * @param {mat} a The matrix to convert
 * @param {string} [ms=', '] The separator string for columns
 * @param {string} [ns='\n'] The separator string for rows
 * @return {string} A string representation of the matrix
 */
mat.str = (a, ms = ', ', ns = '\n') => chunk(a.entries, a.n).map(r => r.join(ms)).join(ns);

if (true) {
  module.exports = { vec, mat };
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_19801__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_19801__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __nested_webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __nested_webpack_exports__;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const vec_1 = __nested_webpack_require_19801__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
function clamp(a, min = 0, max = 1) {
    return a < min ? min : (a > max ? max : a);
}
class Camera {
    constructor(position, options) {
        this.size = (0, vec_1.vec)();
        this.actualPosition = (0, vec_1.vec)();
        this.targetPosition = (0, vec_1.vec)();
        this.actualScale = 1;
        this.targetScale = 1;
        this.actualPosition = position;
        this.targetPosition = position;
        this.options = Object.assign({}, Camera.defaultOptions, options !== null && options !== void 0 ? options : {});
    }
    get position() {
        return this.targetPosition;
    }
    set position(value) {
        this.targetPosition = value;
    }
    set positionImmediate(value) {
        this.actualPosition = value;
        this.targetPosition = value;
    }
    get scale() {
        return this.targetScale;
    }
    set scale(value) {
        this.targetScale = clamp(value, this.options.minScale, this.options.maxScale);
    }
    set scaleImmediate(value) {
        this.actualScale = clamp(value, this.options.minScale, this.options.maxScale);
        this.targetScale = this.actualScale;
    }
    /**
     * Get screen bounds based on the current camera position and scale
     */
    get bounds() {
        return {
            top: this.actualPosition.y - (this.size.y / 2) / this.actualScale,
            bottom: this.actualPosition.y + (this.size.y / 2) / this.actualScale,
            left: this.actualPosition.x - (this.size.x / 2) / this.actualScale,
            right: this.actualPosition.x + (this.size.x / 2) / this.actualScale
        };
    }
    /**
     * Convert a screen position to a world position
     */
    positionToWorld(position) {
        const bounds = this.bounds;
        return vec_1.vec.add({ x: bounds.left, y: bounds.top }, vec_1.vec.mul(position, 1 / this.scale));
    }
    /**
     * Update context transforms to match camera position and scale
     */
    draw(context, width, height) {
        this.size = (0, vec_1.vec)(width, height);
        const d = vec_1.vec.sub(this.actualPosition, this.targetPosition);
        this.actualPosition = vec_1.vec.add(this.position, vec_1.vec.mul(d, this.options.moveEaseAmount));
        const s = clamp(this.targetScale, this.options.minScale, this.options.maxScale);
        this.actualScale = s + (this.actualScale - s) * this.options.scaleEaseAmount;
        context.setTransform(1, 0, 0, 1, 0, 0);
        context.translate((this.size.x / 2) - this.actualPosition.x * this.actualScale, (this.size.y / 2) - this.actualPosition.y * this.actualScale);
        context.scale(this.actualScale, this.actualScale);
    }
}
exports["default"] = Camera;
Camera.defaultOptions = {
    allowScale: true,
    minScale: 0.5,
    maxScale: 4,
    moveEaseAmount: 0.1,
    scaleEaseAmount: 0.1,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUE0QztBQXdDNUMsU0FBUyxLQUFLLENBQUMsQ0FBUyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDeEMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBcUIsTUFBTTtJQXFCekIsWUFBbUIsUUFBYSxFQUFFLE9BQWdDO1FBVjFELFNBQUksR0FBUSxJQUFBLFNBQUcsR0FBRSxDQUFDO1FBRWxCLG1CQUFjLEdBQVEsSUFBQSxTQUFHLEdBQUUsQ0FBQztRQUU1QixtQkFBYyxHQUFRLElBQUEsU0FBRyxHQUFFLENBQUM7UUFFNUIsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFFeEIsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFHOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUM7UUFDL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUM7UUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUMxQixFQUFFLEVBQ0YsTUFBTSxDQUFDLGNBQWMsRUFDckIsT0FBTyxhQUFQLE9BQU8sY0FBUCxPQUFPLEdBQUksRUFBRSxDQUNkLENBQUM7SUFDSixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBVyxRQUFRLENBQUMsS0FBVTtRQUM1QixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBVyxpQkFBaUIsQ0FBQyxLQUFVO1FBQ3JDLElBQUks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
})();

/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/@basementuniverse/content-manager/build/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@basementuniverse/content-manager/build/index.js ***!
  \***********************************************************************/
/***/ ((module) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else { var i, a; }
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./content-loaders/audio.loader.ts":
/*!*****************************************!*\
  !*** ./content-loaders/audio.loader.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AudioLoader = void 0;
const AudioLoader = async (url) => {
    return new Promise((resolve, reject) => {
        const audio = new Audio(url);
        audio.addEventListener('loadeddata', () => {
            resolve(audio);
        });
        audio.addEventListener('error', () => {
            reject(`Error loading audio "${url}"`);
        });
    });
};
exports.AudioLoader = AudioLoader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaW8ubG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vY29udGVudC1sb2FkZXJzL2F1ZGlvLmxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFTyxNQUFNLFdBQVcsR0FBa0IsS0FBSyxFQUM3QyxHQUFXLEVBQ0csRUFBRTtJQUNoQixPQUFPLElBQUksT0FBTyxDQUFtQixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUN2RCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixLQUFLLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtZQUN4QyxPQUFPLENBQUMsS0FBWSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNuQyxNQUFNLENBQUMsd0JBQXdCLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVpXLFFBQUEsV0FBVyxlQVl0QiJ9

/***/ }),

/***/ "./content-loaders/font.loader.ts":
/*!****************************************!*\
  !*** ./content-loaders/font.loader.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FontLoader = void 0;
const FontLoader = async (url, family) => {
    return new Promise((resolve, reject) => {
        const font = new FontFace(family, `url(${url})`);
        font.load()
            .then(font => {
            document.fonts.add(font);
            resolve(font);
        })
            .catch(() => {
            reject(`Error loading font "${url}"`);
        });
    });
};
exports.FontLoader = FontLoader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9udC5sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9jb250ZW50LWxvYWRlcnMvZm9udC5sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRU8sTUFBTSxVQUFVLEdBQWtCLEtBQUssRUFDNUMsR0FBVyxFQUNYLE1BQWMsRUFDQSxFQUFFO0lBQ2hCLE9BQU8sSUFBSSxPQUFPLENBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDL0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsSUFBSSxFQUFFO2FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1gsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsT0FBTyxDQUFDLElBQVcsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDVixNQUFNLENBQUMsdUJBQXVCLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQWZXLFFBQUEsVUFBVSxjQWVyQiJ9

/***/ }),

/***/ "./content-loaders/image.loader.ts":
/*!*****************************************!*\
  !*** ./content-loaders/image.loader.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImageLoader = void 0;
const ImageLoader = async (url) => {
    return new Promise((resolve, reject) => {
        const image = new Image();
        image.src = url;
        image.addEventListener('load', () => {
            resolve(image);
        });
        image.addEventListener('error', () => {
            reject(`Error loading image "${url}"`);
        });
    });
};
exports.ImageLoader = ImageLoader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UubG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vY29udGVudC1sb2FkZXJzL2ltYWdlLmxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFTyxNQUFNLFdBQVcsR0FBa0IsS0FBSyxFQUM3QyxHQUFXLEVBQ2dCLEVBQUU7SUFDN0IsT0FBTyxJQUFJLE9BQU8sQ0FBbUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDdkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUMxQixLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQixLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUNsQyxPQUFPLENBQUMsS0FBWSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNuQyxNQUFNLENBQUMsd0JBQXdCLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQWJXLFFBQUEsV0FBVyxlQWF0QiJ9

/***/ }),

/***/ "./content-loaders/index.ts":
/*!**********************************!*\
  !*** ./content-loaders/index.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_5331__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__nested_webpack_require_5331__(/*! ./font.loader */ "./content-loaders/font.loader.ts"), exports);
__exportStar(__nested_webpack_require_5331__(/*! ./image.loader */ "./content-loaders/image.loader.ts"), exports);
__exportStar(__nested_webpack_require_5331__(/*! ./json.loader */ "./content-loaders/json.loader.ts"), exports);
__exportStar(__nested_webpack_require_5331__(/*! ./audio.loader */ "./content-loaders/audio.loader.ts"), exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9jb250ZW50LWxvYWRlcnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdEQUE4QjtBQUM5QixpREFBK0I7QUFDL0IsZ0RBQThCO0FBQzlCLGlEQUErQiJ9

/***/ }),

/***/ "./content-loaders/json.loader.ts":
/*!****************************************!*\
  !*** ./content-loaders/json.loader.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSONLoader = void 0;
const JSONLoader = async (urlOrData) => {
    if (typeof urlOrData === 'string' &&
        urlOrData.startsWith('http')) {
        return new Promise((resolve, reject) => {
            window.fetch(urlOrData, {
                method: 'GET',
                headers: {
                    'content-type': 'application/json;charset=UTF-8',
                },
            })
                .then(response => {
                return response.json();
            })
                .then(json => {
                resolve(json);
            })
                .catch(() => {
                reject(`Error loading json "${urlOrData}"`);
            });
        });
    }
    return urlOrData;
};
exports.JSONLoader = JSONLoader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi5sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9jb250ZW50LWxvYWRlcnMvanNvbi5sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRU8sTUFBTSxVQUFVLEdBQWtCLEtBQUssRUFDNUMsU0FBYyxFQUNGLEVBQUU7SUFDZCxJQUNFLE9BQU8sU0FBUyxLQUFLLFFBQVE7UUFDN0IsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFDNUI7UUFDQSxPQUFPLElBQUksT0FBTyxDQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO2dCQUN0QixNQUFNLEVBQUUsS0FBSztnQkFDYixPQUFPLEVBQUU7b0JBQ1AsY0FBYyxFQUFFLGdDQUFnQztpQkFDakQ7YUFDRixDQUFDO2lCQUNDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDZixPQUFPLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QixDQUFDLENBQUM7aUJBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNYLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLEdBQUcsRUFBRTtnQkFDVixNQUFNLENBQUMsdUJBQXVCLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFDOUMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztLQUNKO0lBQ0QsT0FBTyxTQUFjLENBQUM7QUFDeEIsQ0FBQyxDQUFDO0FBMUJXLFFBQUEsVUFBVSxjQTBCckIifQ==

/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, exports, __nested_webpack_require_9068__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContentItemStatus = exports.ContentManagerStatus = exports.ContentItemType = void 0;
const content_loaders_1 = __nested_webpack_require_9068__(/*! ./content-loaders */ "./content-loaders/index.ts");
var ContentItemType;
(function (ContentItemType) {
    ContentItemType["JSON"] = "json";
    ContentItemType["Font"] = "font";
    ContentItemType["Image"] = "image";
    ContentItemType["Audio"] = "audio";
})(ContentItemType = exports.ContentItemType || (exports.ContentItemType = {}));
var ContentManagerStatus;
(function (ContentManagerStatus) {
    ContentManagerStatus[ContentManagerStatus["Idle"] = 0] = "Idle";
    ContentManagerStatus[ContentManagerStatus["Loading"] = 1] = "Loading";
    ContentManagerStatus[ContentManagerStatus["Loaded"] = 2] = "Loaded";
})(ContentManagerStatus = exports.ContentManagerStatus || (exports.ContentManagerStatus = {}));
var ContentItemStatus;
(function (ContentItemStatus) {
    ContentItemStatus[ContentItemStatus["Idle"] = 0] = "Idle";
    ContentItemStatus[ContentItemStatus["Loading"] = 1] = "Loading";
    ContentItemStatus[ContentItemStatus["Loaded"] = 2] = "Loaded";
})(ContentItemStatus = exports.ContentItemStatus || (exports.ContentItemStatus = {}));
const defaultContentLoaders = {
    [ContentItemType.JSON]: content_loaders_1.JSONLoader,
    [ContentItemType.Font]: content_loaders_1.FontLoader,
    [ContentItemType.Image]: content_loaders_1.ImageLoader,
    [ContentItemType.Audio]: content_loaders_1.AudioLoader,
};
async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
function clamp(a, min = 0, max = 1) {
    return a < min ? min : (a > max ? max : a);
}
function randomBetween(min, max) {
    return Math.random() * (max - min) + min;
}
const MIN_SIMULATED_LOADING_TIME = 1000;
const MAX_SIMULATED_LOADING_TIME = 3000;
class ContentManager {
    constructor(options) {
        var _a;
        this.currentContentList = [];
        this.content = {};
        this.status = ContentManagerStatus.Idle;
        this.options = Object.assign({}, {
            ...ContentManager.defaultOptions,
            loaders: {
                ...ContentManager.defaultOptions.loaders,
                ...((_a = options === null || options === void 0 ? void 0 : options.loaders) !== null && _a !== void 0 ? _a : {}),
            },
        }, options !== null && options !== void 0 ? options : {});
    }
    /**
     * Initialise the content manager and provide configuration options
     */
    static initialise(options) {
        if (ContentManager.instance !== undefined) {
            throw new Error('Content manager already initialised');
        }
        ContentManager.instance = new ContentManager(options);
    }
    static getInstance() {
        if (ContentManager.instance === undefined) {
            throw new Error('Content manager not properly initialised');
        }
        return ContentManager.instance;
    }
    /**
     * Current loading progress, represented as a unit scalar [0, 1]
     */
    static get progress() {
        const instance = ContentManager.getInstance();
        return instance.getProgress();
    }
    /**
     * Current content manager status
     */
    static get status() {
        const instance = ContentManager.getInstance();
        return instance.status;
    }
    getProgress() {
        if (!this.currentContentList.length) {
            return 1;
        }
        const names = this.currentContentList.map(item => item.name);
        const loaded = Object.entries(this.content).filter(([name, item]) => names.includes(name) && item.status === ContentItemStatus.Loaded);
        return clamp(loaded.length / this.currentContentList.length);
    }
    /**
     * Load content items
     *
     * Existing content items will be retained, and any content items that already exist
     * will be re-loaded
     */
    static async load(items) {
        var _a, _b;
        if (!items || items.length === 0) {
            return;
        }
        const instance = ContentManager.getInstance();
        if (!instance.options.loaders ||
            Object.keys(instance.options.loaders).length === 0) {
            throw new Error('No content loaders defined');
        }
        instance.currentContentList = items;
        instance.status = ContentManagerStatus.Loading;
        for (const item of items) {
            if (instance.options.simulateSlowLoading) {
                await sleep(randomBetween((_a = instance.options.slowLoadingTimeMin) !== null && _a !== void 0 ? _a : MIN_SIMULATED_LOADING_TIME, (_b = instance.options.slowLoadingTimeMax) !== null && _b !== void 0 ? _b : MAX_SIMULATED_LOADING_TIME));
            }
            if (!(item.type in instance.options.loaders)) {
                throw new Error(`No content loader defined for type "${item.type}"`);
            }
            const contentItem = {
                name: item.name,
                type: item.type,
                content: null,
                status: ContentItemStatus.Loading,
            };
            instance.content[item.name] = contentItem;
            contentItem.content = await instance.options.loaders[item.type](...item.args);
            contentItem.status = ContentItemStatus.Loaded;
        }
        instance.status = ContentManagerStatus.Loaded;
    }
    /**
     * Retrieve a content item by name
     */
    static get(name) {
        const instance = ContentManager.getInstance();
        if (!(name in instance.content)) {
            if (instance.options.throwOnNotFound) {
                throw new Error(`Content item "${name}" not found`);
            }
            return undefined;
        }
        return instance.content[name].content;
    }
}
exports["default"] = ContentManager;
ContentManager.defaultOptions = {
    loaders: defaultContentLoaders,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1REFLMkI7QUE0QzNCLElBQVksZUFLWDtBQUxELFdBQVksZUFBZTtJQUN6QixnQ0FBYSxDQUFBO0lBQ2IsZ0NBQWEsQ0FBQTtJQUNiLGtDQUFlLENBQUE7SUFDZixrQ0FBZSxDQUFBO0FBQ2pCLENBQUMsRUFMVyxlQUFlLEdBQWYsdUJBQWUsS0FBZix1QkFBZSxRQUsxQjtBQUVELElBQVksb0JBSVg7QUFKRCxXQUFZLG9CQUFvQjtJQUM5QiwrREFBUSxDQUFBO0lBQ1IscUVBQU8sQ0FBQTtJQUNQLG1FQUFNLENBQUE7QUFDUixDQUFDLEVBSlcsb0JBQW9CLEdBQXBCLDRCQUFvQixLQUFwQiw0QkFBb0IsUUFJL0I7QUFFRCxJQUFZLGlCQUlYO0FBSkQsV0FBWSxpQkFBaUI7SUFDM0IseURBQVEsQ0FBQTtJQUNSLCtEQUFPLENBQUE7SUFDUCw2REFBTSxDQUFBO0FBQ1IsQ0FBQyxFQUpXLGlCQUFpQixHQUFqQix5QkFBaUIsS0FBakIseUJBQWlCLFFBSTVCO0FBcUJELE1BQU0scUJBQXFCLEdBQXFCO0lBQzlDLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLDRCQUFVO0lBQ2xDLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLDRCQUFVO0lBQ2xDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLDZCQUFXO0lBQ3BDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLDZCQUFXO0NBQ3JDLENBQUM7QUFFRixLQUFLLFVBQVUsS0FBSyxDQUFDLEVBQVU7SUFDN0IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBRUQsU0FBUyxLQUFLLENBQUMsQ0FBUyxFQUFFLEdBQUcsR0FBRyxD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

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_21086__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_21086__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_21086__("./index.ts");
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/@basementuniverse/debug/build/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@basementuniverse/debug/build/index.js ***!
  \*************************************************************/
/***/ ((module) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else { var i, a; }
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@basementuniverse/utils/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@basementuniverse/utils/utils.js ***!
  \*******************************************************/
/***/ ((module) => {

/**
 * @overview A library of useful functions
 * @author Gordon Larrigan
 */

/**
 * Check if two numbers are approximately equal
 * @param {number} a Number a
 * @param {number} b Number b
 * @param {number} [p=Number.EPSILON] The precision value
 * @return {boolean} True if numbers a and b are approximately equal
 */
const floatEquals = (a, b, p = Number.EPSILON) => Math.abs(a - b) < p;

/**
 * Clamp a number between min and max
 * @param {number} a The number to clamp
 * @param {number} [min=0] The minimum value
 * @param {number} [max=1] The maximum value
 * @return {number} A clamped number
 */
const clamp = (a, min = 0, max = 1) => a < min ? min : (a > max ? max : a);

/**
 * Get the fractional part of a number
 * @param {number} a The number from which to get the fractional part
 * @return {number} The fractional part of the number
 */
const frac = a => a >= 0 ? a - Math.floor(a) : a - Math.ceil(a);

/**
 * Do a linear interpolation between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value, should be in the interval [0, 1]
 * @return {number} An interpolated value in the interval [a, b]
 */
const lerp = (a, b, i) => a + (b - a) * i;

/**
 * Get the position of i between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolated value in the interval [a, b]
 * @return {number} The position of i between a and b
 */
const unlerp = (a, b, i) => (i - a) / (b - a);

/**
 * Do a bilinear interpolation
 * @param {number} c00 Top-left value
 * @param {number} c10 Top-right value
 * @param {number} c01 Bottom-left value
 * @param {number} c11 Bottom-right value
 * @param {number} ix Interpolation value along x
 * @param {number} iy Interpolation value along y
 * @return {number} A bilinear interpolated value
 */
const blerp = (c00, c10, c01, c11, ix, iy) => lerp(lerp(c00, c10, ix), lerp(c01, c11, ix), iy);

/**
 * Re-map a number i from range a1...a2 to b1...b2
 * @param {number} i The number to re-map
 * @param {number} a1
 * @param {number} a2
 * @param {number} b1
 * @param {number} b2
 * @return {number}
 */
const remap = (i, a1, a2, b1, b2) => b1 + (i - a1) * (b2 - b1) / (a2 - a1);

/**
 * Do a smooth interpolation between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value
 * @return {number} An interpolated value in the interval [a, b]
 */
const smoothstep = (a, b, i) => lerp(a, b, 3 * Math.pow(i, 2) - 2 * Math.pow(i, 3));

/**
 * Get an angle in radians
 * @param {number} degrees The angle in degrees
 * @return {number} The angle in radians
 */
const radians = degrees => (Math.PI / 180) * degrees;

/**
 * Get an angle in degrees
 * @param {number} radians The angle in radians
 * @return {number} The angle in degrees
 */
const degrees = radians => (180 / Math.PI) * radians;

/**
 * Get a random float in the interval [min, max)
 * @param {number} min Inclusive min
 * @param {number} max Exclusive max
 * @return {number} A random float in the interval [min, max)
 */
const randomBetween = (min, max) => Math.random() * (max - min) + min;

/**
 * Get a random integer in the interval [min, max]
 * @param {number} min Inclusive min
 * @param {number} max Inclusive max
 * @return {number} A random integer in the interval [min, max]
 */
const randomIntBetween = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

/**
 * Get a normally-distributed random number
 * @param {number} [mu=0.5] The mean value
 * @param {number} [sigma=0.5] The standard deviation
 * @param {number} [samples=2] The number of samples
 * @return {number} A normally-distributed random number
 */
const cltRandom = (mu = 0.5, sigma = 0.5, samples = 2) => {
  let total = 0;
  for (let i = samples; i--;) {
    total += Math.random();
  }
  return mu + (total - samples / 2) / (samples / 2) * sigma;
};

/**
 * Get a normally-distributed random integer in the interval [min, max]
 * @param {number} min Inclusive min
 * @param {number} max Inclusive max
 * @return {number} A normally-distributed random integer
 */
const cltRandomInt = (min, max) => Math.floor(min + cltRandom(0.5, 0.5, 2) * (max + 1 - min));

/**
 * Return a weighted random integer
 * @param {Array<number>} w An array of weights
 * @return {number} An index from w
 */
const weightedRandom = w => {
  let total = w.reduce((a, i) => a + i, 0), n = 0;
  const r = Math.random() * total;
  while (total > r) {
    total -= w[n++];
  }
  return n - 1;
};

/**
 * An interpolation function
 * @callback interpolationCallback
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value, should be in the interval [0, 1]
 * @return {number} The interpolated value in the interval [a, b]
 */

/**
 * Return an interpolated value from an array
 * @param {Array<number>} a An array of values interpolate
 * @param {number} i A number in the interval [0, 1]
 * @param {interpolationCallback} [f=Math.lerp] The interpolation function to use
 * @return {number} An interpolated value in the interval [min(a), max(a)]
 */
const lerpArray = (a, i, f = lerp) => {
  const s = i * (a.length - 1);
  const p = clamp(Math.trunc(s), 0, a.length - 1);
  return f(a[p] || 0, a[p + 1] || 0, frac(s));
};

/**
 * Get the dot product of two vectors
 * @param {Array<number>} a Vector a
 * @param {Array<number>} b Vector b
 * @return {number} a âˆ™ b
 */
const dot = (a, b) => a.reduce((n, v, i) => n + v * b[i], 0);

/**
 * Get the factorial of a number
 * @param {number} a
 * @return {number} a!
 */
const factorial = a => {
  let result = 1;
  for (let i = 2; i <= a; i++) {
    result *= i;
  }
  return result;
};

/**
 * Get the number of permutations of r elements from a set of n elements
 * @param {number} n
 * @param {number} r
 * @return {number} nPr
 */
const permutation = (n, r) => factorial(n) / factorial(n - r);

/**
 * Get the number of combinations of r elements from a set of n elements
 * @param {number} n
 * @param {number} r
 * @return {number} nCr
 */
const combination = (n, r) => factorial(n) / (factorial(r) * factorial(n - r));

/**
 * A function for generating array values
 * @callback timesCallback
 * @param {number} i The array index
 * @return {*} The array value
 */

/**
 * Return a new array with length n by calling function f(i) on each element
 * @param {timesCallback} f
 * @param {number} n The size of the array
 * @return {Array<*>}
 */
const times = (f, n) => Array(n).fill(0).map((_, i) => f(i));

/**
 * Return an array containing numbers 0->(n - 1)
 * @param {number} n The size of the array
 * @return {Array<number>} An array of integers 0->(n - 1)
 */
const range = n => times(i => i, n);

/**
 * Zip 2 arrays together, i.e. ([1, 2, 3], [a, b, c]) => [[1, a], [2, b], [3, c]]
 * @param {Array<*>} a
 * @param {Array<*>} b
 * @return {Array<Array<*>>}
 */
const zip = (a, b) => a.map((k, i) => [k, b[i]]);

/**
 * Return array[i] with positive and negative wrapping
 * @param {Array<*>} a
 * @param {number} i The positively/negatively wrapped array index
 * @return {*} An element from the array
 */
const at = (a, i) => a[i < 0 ? a.length - (Math.abs(i + 1) % a.length) - 1 : i % a.length];

/**
 * Chop an array into chunks of size n
 * @param {Array<*>} a
 * @param {number} n The chunk size
 * @return {Array<Array<*>>} An array of array chunks
 */
const chunk = (a, n) => times(i => a.slice(i * n, i * n + n), Math.ceil(a.length / n));

/**
 * Randomly shuffle a shallow copy of an array
 * @param {Array<*>} a
 * @return {Array<*>} The shuffled array
 */
const shuffle = a => a.slice().sort(() => Math.random() - 0.5);

if (true) {
  module.exports = {
    floatEquals,
    clamp,
    frac,
    lerp,
    unlerp,
    blerp,
    remap,
    smoothstep,
    radians,
    degrees,
    randomBetween,
    randomIntBetween,
    cltRandom,
    cltRandomInt,
    weightedRandom,
    lerpArray,
    dot,
    factorial,
    permutation,
    combination,
    times,
    range,
    zip,
    at,
    chunk,
    shuffle,
  };
}


/***/ }),

/***/ "./node_modules/@basementuniverse/vec/vec.js":
/*!***************************************************!*\
  !*** ./node_modules/@basementuniverse/vec/vec.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_9135__) => {

const { times, chunk, dot } = __nested_webpack_require_9135__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");

/**
 * @overview A library of useful functions
 * @author Gordon Larrigan
 */

/**
 * A 2d vector
 * @typedef {Object} vec
 * @property {number} x The x component of the vector
 * @property {number} y The y component of the vector
 */

/**
 * Create a new vector
 * @param {number|vec} [x] The x component of the vector, or a vector to copy
 * @param {number} [y] The y component of the vector
 * @return {vec} A new vector
 * @example <caption>Various ways to initialise a vector</caption>
 * let a = vec(3, 2);  // (3, 2)
 * let b = vec(4);     // (4, 4)
 * let c = vec(a);     // (3, 2)
 * let d = vec();      // (0, 0)
 */
const vec = (x, y) => (!x && !y ?
  { x: 0, y: 0 } : (typeof x === 'object' ?
    { x: x.x || 0, y: x.y || 0 } : (y === null || y === undefined ?
      { x: x, y: x } : { x: x, y: y })
  )
);

/**
 * Get the components of a vector as an array
 * @param {vec} a The vector to get components from
 * @return {Array<number>} The vector components as an array
 */
vec.components = a => [a.x, a.y];

/**
 * Return a unit vector (1, 0)
 * @return {vec} A unit vector (1, 0)
 */
vec.ux = () => vec(1, 0);

/**
 * Return a unit vector (0, 1)
 * @return {vec} A unit vector (0, 1)
 */
vec.uy = () => vec(0, 1);

/**
 * Add vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {vec} a + b
 */
vec.add = (a, b) => ({ x: a.x + b.x, y: a.y + b.y });

/**
 * Scale a vector
 * @param {vec} a Vector a
 * @param {number} b Scalar b
 * @return {vec} a * b
 */
vec.mul = (a, b) => ({ x: a.x * b, y: a.y * b });

/**
 * Subtract vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {vec} a - b
 */
vec.sub = (a, b) => ({ x: a.x - b.x, y: a.y - b.y });

/**
 * Get the length of a vector
 * @param {vec} a Vector a
 * @return {number} |a|
 */
vec.len = a => Math.sqrt(a.x * a.x + a.y * a.y);

/**
 * Get the length of a vector using taxicab geometry
 * @param {vec} a Vector a
 * @return {number} |a|
 */
vec.manhattan = a => Math.abs(a.x) + Math.abs(a.y);

/**
 * Normalise a vector
 * @param {vec} a The vector to normalise
 * @return {vec} ^a
 */
vec.nor = a => {
  let len = vec.len(a);
  return len ? { x: a.x / len, y: a.y / len } : vec();
};

/**
 * Get a dot product of vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {number} a âˆ™ b
 */
vec.dot = (a, b) => a.x * b.x + a.y * b.y;

/**
 * Rotate a vector by r radians
 * @param {vec} a The vector to rotate
 * @param {number} r The angle to rotate by, measured in radians
 * @return {vec} A rotated vector
 */
vec.rot = (a, r) => {
  let s = Math.sin(r),
    c = Math.cos(r);
  return { x: c * a.x - s * a.y, y: s * a.x + c * a.y };
}

/**
 * Check if two vectors are equal
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {boolean} True if vectors a and b are equal, false otherwise
 */
vec.eq = (a, b) => a.x === b.x && a.y === b.y;

/**
 * Get the angle of a vector
 * @param {vec} a Vector a
 * @return {number} The angle of vector a in radians
 */
vec.rad = a => Math.atan2(a.y, a.x);

/**
 * Copy a vector
 * @param {vec} a The vector to copy
 * @return {vec} A copy of vector a
 */
vec.cpy = a => vec(a);

/**
 * A function to call on each component of a vector
 * @callback vectorMapCallback
 * @param {number} value The component value
 * @param {'x' | 'y'} label The component label (x or y)
 * @return {number} The mapped component
 */

/**
 * Call a function on each component of a vector and build a new vector from the results
 * @param {vec} a Vector a
 * @param {vectorMapCallback} f The function to call on each component of the vector
 * @return {vec} Vector a mapped through f
 */
vec.map = (a, f) => ({ x: f(a.x, 'x'), y: f(a.y, 'y') });

/**
 * Convert a vector into a string
 * @param {vec} a The vector to convert
 * @param {string} [s=', '] The separator string
 * @return {string} A string representation of the vector
 */
vec.str = (a, s = ', ') => `${a.x}${s}${a.y}`;

/**
 * A matrix
 * @typedef {Object} mat
 * @property {number} m The number of rows in the matrix
 * @property {number} n The number of columns in the matrix
 * @property {Array<number>} entries The matrix values
 */

/**
 * Create a new matrix
 * @param {number} [m=4] The number of rows
 * @param {number} [n=4] The number of columns
 * @param {Array<number>} [entries=[]] Matrix values in reading order
 * @return {mat} A new matrix
 */
const mat = (m = 4, n = 4, entries = []) => ({
  m, n,
  entries: entries.concat(Array(m * n).fill(0)).slice(0, m * n)
});

/**
 * Get an identity matrix of size n
 * @param {number} n The size of the matrix
 * @return {mat} An identity matrix
 */
mat.identity = n => mat(n, n, Array(n * n).fill(0).map((v, i) => +(Math.floor(i / n) === i % n)));

/**
 * Get an entry from a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @return {number} The value at position (i, j) in matrix a
 */
mat.get = (a, i, j) => a.entries[(j - 1) + (i - 1) * a.n];

/**
 * Set an entry of a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @param {number} v The value to set in matrix a
 */
mat.set = (a, i, j, v) => { a.entries[(j - 1) + (i - 1) * a.n] = v; };

/**
 * Get a row from a matrix as an array
 * @param {mat} a Matrix a
 * @param {number} m The row offset
 * @return {Array<number>} Row m from matrix a
 */
mat.row = (a, m) => {
  const s = (m - 1) * a.n;
  return a.entries.slice(s, s + a.n);
};

/**
 * Get a column from a matrix as an array
 * @param {mat} a Matrix a
 * @param {number} n The column offset
 * @return {Array<number>} Column n from matrix a
 */
mat.col = (a, n) => times(i => mat.get(a, (i + 1), n), a.m);

/**
 * Add matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat} a + b
 */
mat.add = (a, b) => a.m === b.m && a.n === b.n && mat.map(a, (v, i) => v + b.entries[i]);

/**
 * Subtract matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat} a - b
 */
mat.sub = (a, b) => a.m === b.m && a.n === b.n && mat.map(a, (v, i) => v - b.entries[i]);

/**
 * Multiply matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat|boolean} ab or false if the matrices cannot be multiplied
 */
mat.mul = (a, b) => {
  if (a.n !== b.m) { return false; }
  const result = mat(a.m, b.n);
  for (let i = 1; i <= a.m; i++) {
    for (let j = 1; j <= b.n; j++) {
      mat.set(result, i, j, dot(mat.row(a, i), mat.col(b, j)));
    }
  }
  return result;
};

/**
 * Scale a matrix
 * @param {mat} a Matrix a
 * @param {number} b Scalar b
 * @return {mat} a * b
 */
mat.scale = (a, b) => mat.map(a, v => v * b);

/**
 * Transpose a matrix
 * @param {mat} a The matrix to transpose
 * @return {mat} A transposed matrix
 */
mat.trans = a => mat(a.n, a.m, times(i => mat.col(a, (i + 1)), a.n).flat());

/**
 * Get the minor of a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @return {mat|boolean} The (i, j) minor of matrix a or false if the matrix is not square
 */
mat.minor = (a, i, j) => {
  if (a.m !== a.n) { return false; }
  const entries = [];
  for (let ii = 1; ii <= a.m; ii++) {
    if (ii === i) { continue; }
    for (let jj = 1; jj <= a.n; jj++) {
      if (jj === j) { continue; }
      entries.push(mat.get(a, ii, jj));
    }
  }
  return mat(a.m - 1, a.n - 1, entries);
};

/**
 * Get the determinant of a matrix
 * @param {mat} a Matrix a
 * @return {number|boolean} |a| or false if the matrix is not square
 */
mat.det = a => {
  if (a.m !== a.n) { return false; }
  if (a.m === 1) {
    return a.entries[0];
  }
  if (a.m === 2) {
    return a.entries[0] * a.entries[3] - a.entries[1] * a.entries[2];
  }
  let total = 0, sign = 1;
  for (let j = 1; j <= a.n; j++) {
    total += sign * a.entries[j - 1] * mat.det(mat.minor(a, 1, j));
    sign *= -1;
  }
  return total;
};

/**
 * Normalise a matrix
 * @param {mat} a The matrix to normalise
 * @return {mat|boolean} ^a or false if the matrix is not square
 */
mat.nor = a => {
  if (a.m !== a.n) { return false; }
  const d = mat.det(a);
  return mat.map(a, i => i * d);
};

/**
 * Get the adjugate of a matrix
 * @param {mat} a The matrix from which to get the adjugate
 * @return {mat} The adjugate of a
 */
mat.adj = a => {
  const minors = mat(a.m, a.n);
  for (let i = 1; i <= a.m; i++) {
    for (let j = 1; j <= a.n; j++) {
      mat.set(minors, i, j, mat.det(mat.minor(a, i, j)));
    }
  }
  const cofactors = mat.map(minors, (v, i) => v * (i % 2 ? -1 : 1));
  return mat.trans(cofactors);
};

/**
 * Get the inverse of a matrix
 * @param {mat} a The matrix to invert
 * @return {mat|boolean} a^-1 or false if the matrix has no inverse
 */
mat.inv = a => {
  if (a.m !== a.n) { return false; }
  const d = mat.det(a);
  if (d === 0) { return false; }
  return mat.scale(mat.adj(a), 1 / d);
};

/**
 * Check if two matrices are equal
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {boolean} True if matrices a and b are identical, false otherwise
 */
mat.eq = (a, b) => a.m === b.m && a.n === b.n && mat.str(a) === mat.str(b);

/**
 * Copy a matrix
 * @param {mat} a The matrix to copy
 * @return {mat} A copy of matrix a
 */
mat.cpy = a => mat(a.m, a.n, [...a.entries]);

/**
 * A function to call on each entry of a matrix
 * @callback matrixMapCallback
 * @param {number} value The entry value
 * @param {number} index The entry index
 * @param {Array<number>} entries The array of matrix entries
 * @return {number} The mapped entry
 */

/**
 * Call a function on each entry of a matrix and build a new matrix from the results
 * @param {mat} a Matrix a
 * @param {matrixMapCallback} f The function to call on each entry of the matrix
 * @return {mat} Matrix a mapped through f
 */
mat.map = (a, f) => mat(a.m, a.n, a.entries.map(f));

/**
 * Convert a matrix into a string
 * @param {mat} a The matrix to convert
 * @param {string} [ms=', '] The separator string for columns
 * @param {string} [ns='\n'] The separator string for rows
 * @return {string} A string representation of the matrix
 */
mat.str = (a, ms = ', ', ns = '\n') => chunk(a.entries, a.n).map(r => r.join(ms)).join(ns);

if (true) {
  module.exports = { vec, mat };
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_19801__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_19801__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __nested_webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __nested_webpack_exports__;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const vec_1 = __nested_webpack_require_19801__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
class Debug {
    constructor(options) {
        this.options = Object.assign({}, Debug.defaultOptions, options !== null && options !== void 0 ? options : {});
        this.values = new Map();
        this.markers = new Map();
    }
    /**
     * Initialise the debug renderer for displaying values and markers
     */
    static initialise(options = {}) {
        if (Debug.instance !== undefined) {
            throw new Error('Debug has already been initialised');
        }
        Debug.instance = new Debug(options);
    }
    static getInstance() {
        if (Debug.instance === undefined) {
            throw new Error('Debug not properly initialised');
        }
        return Debug.instance;
    }
    /**
     * Show a debug value
     */
    static value(label, value, options) {
        const instance = Debug.getInstance();
        instance.values.set(label, Object.assign({ label, value }, instance.options.defaultValue, options));
    }
    /**
     * Show a marker in world or screen space
     */
    static marker(label, value, position, options) {
        const instance = Debug.getInstance();
        instance.markers.set(label, Object.assign({ label, value, position }, instance.options.defaultMarker, options));
    }
    /**
     * Render the debug values and markers onto a canvas
     */
    static draw(context) {
        const instance = Debug.getInstance();
        // Draw world-space markers
        context.save();
        instance.markers.forEach(marker => {
            if (marker.space === 'world') {
                instance.drawMarker(context, marker);
            }
        });
        context.restore();
        // Draw values and screen-space markers
        context.save();
        context.setTransform(1, 0, 0, 1, 0, 0);
        let position;
        let leftY = instance.options.margin;
        let rightY = instance.options.margin;
        const lineHeight = (instance.options.lineHeight + instance.options.padding * 2);
        instance.values.forEach(value => {
            var _a, _b, _c, _d;
            switch (value.align) {
                case 'left':
                    position = (0, vec_1.vec)(instance.options.margin, leftY);
                    leftY += lineHeight;
                    break;
                case 'right':
                    position = (0, vec_1.vec)(context.canvas.clientWidth - instance.options.margin, rightY);
                    rightY += lineHeight;
                    break;
            }
            instance.drawLabel(context, (value.showLabel ? `${value.label}: ` : '') + `${value.value}`, position, value.align, (_a = value.padding) !== null && _a !== void 0 ? _a : instance.options.padding, (_b = value.font) !== null && _b !== void 0 ? _b : instance.options.font, (_c = value.foregroundColour) !== null && _c !== void 0 ? _c : instance.options.foregroundColour, (_d = value.backgroundColour) !== null && _d !== void 0 ? _d : instance.options.backgroundColour);
        });
        instance.markers.forEach(marker => {
            if (marker.space === 'screen') {
                instance.drawMarker(context, marker);
            }
        });
        context.restore();
        // Clear values and markers ready for next frame
        instance.values.clear();
        instance.markers.clear();
    }
    drawMarker(context, marker) {
        var _a, _b, _c, _d, _e;
        context.save();
        const position = (_a = marker.position) !== null && _a !== void 0 ? _a : (0, vec_1.vec)();
        if (marker.showLabel || marker.showValue) {
            this.drawLabel(context, (marker.showLabel ? `${marker.label}: ` : '') + (marker.showValue ? `${marker.value}` : ''), vec_1.vec.add(position !== null && position !== void 0 ? position : (0, vec_1.vec)(), marker.labelOffset), 'left', (_b = marker.padding) !== null && _b !== void 0 ? _b : this.options.padding, (_c = marker.font) !== null && _c !== void 0 ? _c : this.options.font, (_d = marker.foregroundColour) !== null && _d !== void 0 ? _d : this.options.foregroundColour, (_e = marker.backgroundColour) !== null && _e !== void 0 ? _e : this.options.backgroundColour);
        }
        if (marker.showMarker) {
            context.lineWidth = 2;
            context.strokeStyle = context.fillStyle = marker.markerColour;
            switch (marker.markerStyle) {
                case 'x':
                    this.drawCross(context, position, marker.markerSize);
                    break;
                case '+':
                    this.drawPlus(context, position, marker.markerSize);
                    break;
                case '.':
                    this.drawDot(context, position, marker.markerSize);
                    break;
            }
        }
        context.restore();
    }
    drawLabel(context, text, position, align, padding, font, foregroundColour, backgroundColour) {
        context.save();
        context.font = font;
        context.textBaseline = 'top';
        const backgroundSize = {
            width: context.measureText(text).width + padding * 2,
            height: this.options.lineHeight + padding * 2,
        };
        const x = align === 'right' ? (position.x - backgroundSize.width) : position.x;
        // Draw background
        context.fillStyle = backgroundColour;
        context.fillRect(x - padding, position.y - padding, backgroundSize.width, backgroundSize.height);
        // Draw text
        context.fillStyle = foregroundColour;
        context.fillText(text, x, position.y);
        context.restore();
    }
    drawCross(context, position, size) {
        context.beginPath();
        const halfSize = size / 2;
        context.moveTo(position.x - halfSize, position.y - halfSize);
        context.lineTo(position.x + halfSize, position.y + halfSize);
        context.moveTo(position.x - halfSize, position.y + halfSize);
        context.lineTo(position.x + halfSize, position.y - halfSize);
        context.stroke();
    }
    drawPlus(context, position, size) {
        context.beginPath();
        const halfSize = size / 2;
        context.moveTo(position.x, position.y - halfSize);
        context.lineTo(position.x, position.y + halfSize);
        context.moveTo(position.x - halfSize, position.y);
        context.lineTo(position.x + halfSize, position.y);
        context.stroke();
    }
    drawDot(context, position, size) {
        context.beginPath();
        context.arc(position.x, position.y, size / 2, 0, Math.PI * 2);
        context.fill();
    }
}
exports["default"] = Debug;
Debug.defaultOptions = {
    margin: 10,
    padding: 4,
    font: '10pt Lucida Console, monospace',
    lineHeight: 12,
    foregroundColour: '#fff',
    backgroundColour: '#333',
    defaultValue: {
        align: 'left',
        showLabel: true,
    },
    defaultMarker: {
        showLabel: true,
        showValue: true,
        showMarker: true,
        markerSize: 6,
        markerStyle: 'x',
        markerColour: '#ccc',
        space: 'world',
        labelOffset: (0, vec_1.vec)(10),
    },
};
//# sourceMappingURL=data:application/json;base64,
})();

/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/@basementuniverse/input-manager/build/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@basementuniverse/input-manager/build/index.js ***!
  \*********************************************************************/
/***/ ((module) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else { var i, a; }
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@basementuniverse/utils/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@basementuniverse/utils/utils.js ***!
  \*******************************************************/
/***/ ((module) => {

/**
 * @overview A library of useful functions
 * @author Gordon Larrigan
 */

/**
 * Check if two numbers are approximately equal
 * @param {number} a Number a
 * @param {number} b Number b
 * @param {number} [p=Number.EPSILON] The precision value
 * @return {boolean} True if numbers a and b are approximately equal
 */
const floatEquals = (a, b, p = Number.EPSILON) => Math.abs(a - b) < p;

/**
 * Clamp a number between min and max
 * @param {number} a The number to clamp
 * @param {number} [min=0] The minimum value
 * @param {number} [max=1] The maximum value
 * @return {number} A clamped number
 */
const clamp = (a, min = 0, max = 1) => a < min ? min : (a > max ? max : a);

/**
 * Get the fractional part of a number
 * @param {number} a The number from which to get the fractional part
 * @return {number} The fractional part of the number
 */
const frac = a => a >= 0 ? a - Math.floor(a) : a - Math.ceil(a);

/**
 * Do a linear interpolation between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value, should be in the interval [0, 1]
 * @return {number} An interpolated value in the interval [a, b]
 */
const lerp = (a, b, i) => a + (b - a) * i;

/**
 * Get the position of i between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolated value in the interval [a, b]
 * @return {number} The position of i between a and b
 */
const unlerp = (a, b, i) => (i - a) / (b - a);

/**
 * Do a bilinear interpolation
 * @param {number} c00 Top-left value
 * @param {number} c10 Top-right value
 * @param {number} c01 Bottom-left value
 * @param {number} c11 Bottom-right value
 * @param {number} ix Interpolation value along x
 * @param {number} iy Interpolation value along y
 * @return {number} A bilinear interpolated value
 */
const blerp = (c00, c10, c01, c11, ix, iy) => lerp(lerp(c00, c10, ix), lerp(c01, c11, ix), iy);

/**
 * Re-map a number i from range a1...a2 to b1...b2
 * @param {number} i The number to re-map
 * @param {number} a1
 * @param {number} a2
 * @param {number} b1
 * @param {number} b2
 * @return {number}
 */
const remap = (i, a1, a2, b1, b2) => b1 + (i - a1) * (b2 - b1) / (a2 - a1);

/**
 * Do a smooth interpolation between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value
 * @return {number} An interpolated value in the interval [a, b]
 */
const smoothstep = (a, b, i) => lerp(a, b, 3 * Math.pow(i, 2) - 2 * Math.pow(i, 3));

/**
 * Get an angle in radians
 * @param {number} degrees The angle in degrees
 * @return {number} The angle in radians
 */
const radians = degrees => (Math.PI / 180) * degrees;

/**
 * Get an angle in degrees
 * @param {number} radians The angle in radians
 * @return {number} The angle in degrees
 */
const degrees = radians => (180 / Math.PI) * radians;

/**
 * Get a random float in the interval [min, max)
 * @param {number} min Inclusive min
 * @param {number} max Exclusive max
 * @return {number} A random float in the interval [min, max)
 */
const randomBetween = (min, max) => Math.random() * (max - min) + min;

/**
 * Get a random integer in the interval [min, max]
 * @param {number} min Inclusive min
 * @param {number} max Inclusive max
 * @return {number} A random integer in the interval [min, max]
 */
const randomIntBetween = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

/**
 * Get a normally-distributed random number
 * @param {number} [mu=0.5] The mean value
 * @param {number} [sigma=0.5] The standard deviation
 * @param {number} [samples=2] The number of samples
 * @return {number} A normally-distributed random number
 */
const cltRandom = (mu = 0.5, sigma = 0.5, samples = 2) => {
  let total = 0;
  for (let i = samples; i--;) {
    total += Math.random();
  }
  return mu + (total - samples / 2) / (samples / 2) * sigma;
};

/**
 * Get a normally-distributed random integer in the interval [min, max]
 * @param {number} min Inclusive min
 * @param {number} max Inclusive max
 * @return {number} A normally-distributed random integer
 */
const cltRandomInt = (min, max) => Math.floor(min + cltRandom(0.5, 0.5, 2) * (max + 1 - min));

/**
 * Return a weighted random integer
 * @param {Array<number>} w An array of weights
 * @return {number} An index from w
 */
const weightedRandom = w => {
  let total = w.reduce((a, i) => a + i, 0), n = 0;
  const r = Math.random() * total;
  while (total > r) {
    total -= w[n++];
  }
  return n - 1;
};

/**
 * An interpolation function
 * @callback interpolationCallback
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value, should be in the interval [0, 1]
 * @return {number} The interpolated value in the interval [a, b]
 */

/**
 * Return an interpolated value from an array
 * @param {Array<number>} a An array of values interpolate
 * @param {number} i A number in the interval [0, 1]
 * @param {interpolationCallback} [f=Math.lerp] The interpolation function to use
 * @return {number} An interpolated value in the interval [min(a), max(a)]
 */
const lerpArray = (a, i, f = lerp) => {
  const s = i * (a.length - 1);
  const p = clamp(Math.trunc(s), 0, a.length - 1);
  return f(a[p] || 0, a[p + 1] || 0, frac(s));
};

/**
 * Get the dot product of two vectors
 * @param {Array<number>} a Vector a
 * @param {Array<number>} b Vector b
 * @return {number} a âˆ™ b
 */
const dot = (a, b) => a.reduce((n, v, i) => n + v * b[i], 0);

/**
 * Get the factorial of a number
 * @param {number} a
 * @return {number} a!
 */
const factorial = a => {
  let result = 1;
  for (let i = 2; i <= a; i++) {
    result *= i;
  }
  return result;
};

/**
 * Get the number of permutations of r elements from a set of n elements
 * @param {number} n
 * @param {number} r
 * @return {number} nPr
 */
const permutation = (n, r) => factorial(n) / factorial(n - r);

/**
 * Get the number of combinations of r elements from a set of n elements
 * @param {number} n
 * @param {number} r
 * @return {number} nCr
 */
const combination = (n, r) => factorial(n) / (factorial(r) * factorial(n - r));

/**
 * A function for generating array values
 * @callback timesCallback
 * @param {number} i The array index
 * @return {*} The array value
 */

/**
 * Return a new array with length n by calling function f(i) on each element
 * @param {timesCallback} f
 * @param {number} n The size of the array
 * @return {Array<*>}
 */
const times = (f, n) => Array(n).fill(0).map((_, i) => f(i));

/**
 * Return an array containing numbers 0->(n - 1)
 * @param {number} n The size of the array
 * @return {Array<number>} An array of integers 0->(n - 1)
 */
const range = n => times(i => i, n);

/**
 * Zip 2 arrays together, i.e. ([1, 2, 3], [a, b, c]) => [[1, a], [2, b], [3, c]]
 * @param {Array<*>} a
 * @param {Array<*>} b
 * @return {Array<Array<*>>}
 */
const zip = (a, b) => a.map((k, i) => [k, b[i]]);

/**
 * Return array[i] with positive and negative wrapping
 * @param {Array<*>} a
 * @param {number} i The positively/negatively wrapped array index
 * @return {*} An element from the array
 */
const at = (a, i) => a[i < 0 ? a.length - (Math.abs(i + 1) % a.length) - 1 : i % a.length];

/**
 * Chop an array into chunks of size n
 * @param {Array<*>} a
 * @param {number} n The chunk size
 * @return {Array<Array<*>>} An array of array chunks
 */
const chunk = (a, n) => times(i => a.slice(i * n, i * n + n), Math.ceil(a.length / n));

/**
 * Randomly shuffle a shallow copy of an array
 * @param {Array<*>} a
 * @return {Array<*>} The shuffled array
 */
const shuffle = a => a.slice().sort(() => Math.random() - 0.5);

if (true) {
  module.exports = {
    floatEquals,
    clamp,
    frac,
    lerp,
    unlerp,
    blerp,
    remap,
    smoothstep,
    radians,
    degrees,
    randomBetween,
    randomIntBetween,
    cltRandom,
    cltRandomInt,
    weightedRandom,
    lerpArray,
    dot,
    factorial,
    permutation,
    combination,
    times,
    range,
    zip,
    at,
    chunk,
    shuffle,
  };
}


/***/ }),

/***/ "./node_modules/@basementuniverse/vec/vec.js":
/*!***************************************************!*\
  !*** ./node_modules/@basementuniverse/vec/vec.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __nested_webpack_require_9135__) => {

const { times, chunk, dot } = __nested_webpack_require_9135__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");

/**
 * @overview A library of useful functions
 * @author Gordon Larrigan
 */

/**
 * A 2d vector
 * @typedef {Object} vec
 * @property {number} x The x component of the vector
 * @property {number} y The y component of the vector
 */

/**
 * Create a new vector
 * @param {number|vec} [x] The x component of the vector, or a vector to copy
 * @param {number} [y] The y component of the vector
 * @return {vec} A new vector
 * @example <caption>Various ways to initialise a vector</caption>
 * let a = vec(3, 2);  // (3, 2)
 * let b = vec(4);     // (4, 4)
 * let c = vec(a);     // (3, 2)
 * let d = vec();      // (0, 0)
 */
const vec = (x, y) => (!x && !y ?
  { x: 0, y: 0 } : (typeof x === 'object' ?
    { x: x.x || 0, y: x.y || 0 } : (y === null || y === undefined ?
      { x: x, y: x } : { x: x, y: y })
  )
);

/**
 * Get the components of a vector as an array
 * @param {vec} a The vector to get components from
 * @return {Array<number>} The vector components as an array
 */
vec.components = a => [a.x, a.y];

/**
 * Return a unit vector (1, 0)
 * @return {vec} A unit vector (1, 0)
 */
vec.ux = () => vec(1, 0);

/**
 * Return a unit vector (0, 1)
 * @return {vec} A unit vector (0, 1)
 */
vec.uy = () => vec(0, 1);

/**
 * Add vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {vec} a + b
 */
vec.add = (a, b) => ({ x: a.x + b.x, y: a.y + b.y });

/**
 * Scale a vector
 * @param {vec} a Vector a
 * @param {number} b Scalar b
 * @return {vec} a * b
 */
vec.mul = (a, b) => ({ x: a.x * b, y: a.y * b });

/**
 * Subtract vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {vec} a - b
 */
vec.sub = (a, b) => ({ x: a.x - b.x, y: a.y - b.y });

/**
 * Get the length of a vector
 * @param {vec} a Vector a
 * @return {number} |a|
 */
vec.len = a => Math.sqrt(a.x * a.x + a.y * a.y);

/**
 * Get the length of a vector using taxicab geometry
 * @param {vec} a Vector a
 * @return {number} |a|
 */
vec.manhattan = a => Math.abs(a.x) + Math.abs(a.y);

/**
 * Normalise a vector
 * @param {vec} a The vector to normalise
 * @return {vec} ^a
 */
vec.nor = a => {
  let len = vec.len(a);
  return len ? { x: a.x / len, y: a.y / len } : vec();
};

/**
 * Get a dot product of vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {number} a âˆ™ b
 */
vec.dot = (a, b) => a.x * b.x + a.y * b.y;

/**
 * Rotate a vector by r radians
 * @param {vec} a The vector to rotate
 * @param {number} r The angle to rotate by, measured in radians
 * @return {vec} A rotated vector
 */
vec.rot = (a, r) => {
  let s = Math.sin(r),
    c = Math.cos(r);
  return { x: c * a.x - s * a.y, y: s * a.x + c * a.y };
}

/**
 * Check if two vectors are equal
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {boolean} True if vectors a and b are equal, false otherwise
 */
vec.eq = (a, b) => a.x === b.x && a.y === b.y;

/**
 * Get the angle of a vector
 * @param {vec} a Vector a
 * @return {number} The angle of vector a in radians
 */
vec.rad = a => Math.atan2(a.y, a.x);

/**
 * Copy a vector
 * @param {vec} a The vector to copy
 * @return {vec} A copy of vector a
 */
vec.cpy = a => vec(a);

/**
 * A function to call on each component of a vector
 * @callback vectorMapCallback
 * @param {number} value The component value
 * @param {'x' | 'y'} label The component label (x or y)
 * @return {number} The mapped component
 */

/**
 * Call a function on each component of a vector and build a new vector from the results
 * @param {vec} a Vector a
 * @param {vectorMapCallback} f The function to call on each component of the vector
 * @return {vec} Vector a mapped through f
 */
vec.map = (a, f) => ({ x: f(a.x, 'x'), y: f(a.y, 'y') });

/**
 * Convert a vector into a string
 * @param {vec} a The vector to convert
 * @param {string} [s=', '] The separator string
 * @return {string} A string representation of the vector
 */
vec.str = (a, s = ', ') => `${a.x}${s}${a.y}`;

/**
 * A matrix
 * @typedef {Object} mat
 * @property {number} m The number of rows in the matrix
 * @property {number} n The number of columns in the matrix
 * @property {Array<number>} entries The matrix values
 */

/**
 * Create a new matrix
 * @param {number} [m=4] The number of rows
 * @param {number} [n=4] The number of columns
 * @param {Array<number>} [entries=[]] Matrix values in reading order
 * @return {mat} A new matrix
 */
const mat = (m = 4, n = 4, entries = []) => ({
  m, n,
  entries: entries.concat(Array(m * n).fill(0)).slice(0, m * n)
});

/**
 * Get an identity matrix of size n
 * @param {number} n The size of the matrix
 * @return {mat} An identity matrix
 */
mat.identity = n => mat(n, n, Array(n * n).fill(0).map((v, i) => +(Math.floor(i / n) === i % n)));

/**
 * Get an entry from a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @return {number} The value at position (i, j) in matrix a
 */
mat.get = (a, i, j) => a.entries[(j - 1) + (i - 1) * a.n];

/**
 * Set an entry of a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @param {number} v The value to set in matrix a
 */
mat.set = (a, i, j, v) => { a.entries[(j - 1) + (i - 1) * a.n] = v; };

/**
 * Get a row from a matrix as an array
 * @param {mat} a Matrix a
 * @param {number} m The row offset
 * @return {Array<number>} Row m from matrix a
 */
mat.row = (a, m) => {
  const s = (m - 1) * a.n;
  return a.entries.slice(s, s + a.n);
};

/**
 * Get a column from a matrix as an array
 * @param {mat} a Matrix a
 * @param {number} n The column offset
 * @return {Array<number>} Column n from matrix a
 */
mat.col = (a, n) => times(i => mat.get(a, (i + 1), n), a.m);

/**
 * Add matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat} a + b
 */
mat.add = (a, b) => a.m === b.m && a.n === b.n && mat.map(a, (v, i) => v + b.entries[i]);

/**
 * Subtract matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat} a - b
 */
mat.sub = (a, b) => a.m === b.m && a.n === b.n && mat.map(a, (v, i) => v - b.entries[i]);

/**
 * Multiply matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat|boolean} ab or false if the matrices cannot be multiplied
 */
mat.mul = (a, b) => {
  if (a.n !== b.m) { return false; }
  const result = mat(a.m, b.n);
  for (let i = 1; i <= a.m; i++) {
    for (let j = 1; j <= b.n; j++) {
      mat.set(result, i, j, dot(mat.row(a, i), mat.col(b, j)));
    }
  }
  return result;
};

/**
 * Scale a matrix
 * @param {mat} a Matrix a
 * @param {number} b Scalar b
 * @return {mat} a * b
 */
mat.scale = (a, b) => mat.map(a, v => v * b);

/**
 * Transpose a matrix
 * @param {mat} a The matrix to transpose
 * @return {mat} A transposed matrix
 */
mat.trans = a => mat(a.n, a.m, times(i => mat.col(a, (i + 1)), a.n).flat());

/**
 * Get the minor of a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @return {mat|boolean} The (i, j) minor of matrix a or false if the matrix is not square
 */
mat.minor = (a, i, j) => {
  if (a.m !== a.n) { return false; }
  const entries = [];
  for (let ii = 1; ii <= a.m; ii++) {
    if (ii === i) { continue; }
    for (let jj = 1; jj <= a.n; jj++) {
      if (jj === j) { continue; }
      entries.push(mat.get(a, ii, jj));
    }
  }
  return mat(a.m - 1, a.n - 1, entries);
};

/**
 * Get the determinant of a matrix
 * @param {mat} a Matrix a
 * @return {number|boolean} |a| or false if the matrix is not square
 */
mat.det = a => {
  if (a.m !== a.n) { return false; }
  if (a.m === 1) {
    return a.entries[0];
  }
  if (a.m === 2) {
    return a.entries[0] * a.entries[3] - a.entries[1] * a.entries[2];
  }
  let total = 0, sign = 1;
  for (let j = 1; j <= a.n; j++) {
    total += sign * a.entries[j - 1] * mat.det(mat.minor(a, 1, j));
    sign *= -1;
  }
  return total;
};

/**
 * Normalise a matrix
 * @param {mat} a The matrix to normalise
 * @return {mat|boolean} ^a or false if the matrix is not square
 */
mat.nor = a => {
  if (a.m !== a.n) { return false; }
  const d = mat.det(a);
  return mat.map(a, i => i * d);
};

/**
 * Get the adjugate of a matrix
 * @param {mat} a The matrix from which to get the adjugate
 * @return {mat} The adjugate of a
 */
mat.adj = a => {
  const minors = mat(a.m, a.n);
  for (let i = 1; i <= a.m; i++) {
    for (let j = 1; j <= a.n; j++) {
      mat.set(minors, i, j, mat.det(mat.minor(a, i, j)));
    }
  }
  const cofactors = mat.map(minors, (v, i) => v * (i % 2 ? -1 : 1));
  return mat.trans(cofactors);
};

/**
 * Get the inverse of a matrix
 * @param {mat} a The matrix to invert
 * @return {mat|boolean} a^-1 or false if the matrix has no inverse
 */
mat.inv = a => {
  if (a.m !== a.n) { return false; }
  const d = mat.det(a);
  if (d === 0) { return false; }
  return mat.scale(mat.adj(a), 1 / d);
};

/**
 * Check if two matrices are equal
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {boolean} True if matrices a and b are identical, false otherwise
 */
mat.eq = (a, b) => a.m === b.m && a.n === b.n && mat.str(a) === mat.str(b);

/**
 * Copy a matrix
 * @param {mat} a The matrix to copy
 * @return {mat} A copy of matrix a
 */
mat.cpy = a => mat(a.m, a.n, [...a.entries]);

/**
 * A function to call on each entry of a matrix
 * @callback matrixMapCallback
 * @param {number} value The entry value
 * @param {number} index The entry index
 * @param {Array<number>} entries The array of matrix entries
 * @return {number} The mapped entry
 */

/**
 * Call a function on each entry of a matrix and build a new matrix from the results
 * @param {mat} a Matrix a
 * @param {matrixMapCallback} f The function to call on each entry of the matrix
 * @return {mat} Matrix a mapped through f
 */
mat.map = (a, f) => mat(a.m, a.n, a.entries.map(f));

/**
 * Convert a matrix into a string
 * @param {mat} a The matrix to convert
 * @param {string} [ms=', '] The separator string for columns
 * @param {string} [ns='\n'] The separator string for rows
 * @return {string} A string representation of the matrix
 */
mat.str = (a, ms = ', ', ns = '\n') => chunk(a.entries, a.n).map(r => r.join(ms)).join(ns);

if (true) {
  module.exports = { vec, mat };
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_19801__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_19801__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __nested_webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __nested_webpack_exports__;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const vec_1 = __nested_webpack_require_19801__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
class InputManager {
    constructor(options) {
        this.keyboardState = {};
        this.previousKeyboardState = {};
        this.mouseState = { button: false, position: (0, vec_1.vec)(), wheel: 0 };
        this.previousMouseState = { button: false, position: (0, vec_1.vec)(), wheel: 0 };
        this.options = Object.assign({}, InputManager.defaultOptions, options !== null && options !== void 0 ? options : {});
        // Set up event handlers
        if (this.options.mouse) {
            window.addEventListener('mousedown', () => {
                this.mouseState.button = true;
            });
            window.addEventListener('mouseup', () => {
                this.mouseState.button = false;
            });
            window.addEventListener('touchstart', () => {
                this.mouseState.button = true;
            });
            window.addEventListener('touchend', () => {
                this.mouseState.button = false;
            });
            window.addEventListener('mousemove', e => {
                this.mouseState.position.x = e.offsetX;
                this.mouseState.position.y = e.offsetY;
            });
            if (this.options.mouseWheel) {
                window.addEventListener('wheel', e => {
                    this.mouseState.wheel = e.deltaY > 0 ? 1 : -1;
                });
            }
        }
        if (this.options.keyboard) {
            window.addEventListener('keydown', e => {
                this.keyboardState[e.code] = true;
            });
            window.addEventListener('keyup', e => {
                this.keyboardState[e.code] = false;
            });
        }
    }
    /**
     * Initialise the input manager for managing mouse and keyboard input
     */
    static initialise(options) {
        if (InputManager.instance !== undefined) {
            throw new Error('Input manager already initialised');
        }
        InputManager.instance = new InputManager(options);
    }
    static getInstance() {
        if (InputManager.instance === undefined) {
            throw new Error('Input manager not properly initialised');
        }
        return InputManager.instance;
    }
    /**
     * Update the state of the input devices
     */
    static update() {
        const instance = InputManager.getInstance();
        instance.previousKeyboardState = Object.assign({}, instance.keyboardState);
        instance.previousMouseState = {
            ...instance.mouseState,
            position: vec_1.vec.cpy(instance.mouseState.position),
        };
        instance.mouseState.wheel = 0;
    }
    /**
     * Check if a key is currently pressed down
     */
    static keyDown(code) {
        const instance = InputManager.getInstance();
        // Check if any key is down
        if (!code) {
            for (const k in instance.keyboardState) {
                if (instance.keyboardState[k]) {
                    return true;
                }
            }
            return false;
        }
        return !!instance.keyboardState[code];
    }
    /**
     * Check if a key has been pressed since the last frame
     */
    static keyPressed(code) {
        const instance = InputManager.getInstance();
        // Check if any key was pressed
        if (!code) {
            for (const k in instance.keyboardState) {
                if (instance.keyboardState[k] &&
                    (!(k in instance.previousKeyboardState) ||
                        !instance.previousKeyboardState[k])) {
                    return true;
                }
            }
            return false;
        }
        return !!instance.keyboardState[code] && !instance.previousKeyboardState[code];
    }
    /**
     * Check if a key has been released since the last frame
     */
    static keyReleased(code) {
        const instance = InputManager.getInstance();
        // Check if any key was released
        if (!code) {
            for (const k in instance.keyboardState) {
                if (!instance.keyboardState[k] &&
                    !!instance.previousKeyboardState[k]) {
                    return true;
                }
            }
            return false;
        }
        return !instance.keyboardState[code] && !!instance.previousKeyboardState[code];
    }
    /**
     * Check if a mouse button is currently pressed down
     */
    static mouseDown() {
        const instance = InputManager.getInstance();
        return !!instance.mouseState.button;
    }
    /**
     * Check if a mouse button has been pressed since the last frame
     */
    static mousePressed() {
        const instance = InputManager.getInstance();
        return !!instance.mouseState.button && !instance.previousMouseState.button;
    }
    /**
     * Check if a mouse button has been released since the last frame
     */
    static mouseReleased() {
        const instance = InputManager.getInstance();
        return !instance.mouseState.button && !!instance.previousMouseState.button;
    }
    /**
     * Check if the mousewheel is scrolling up
     */
    static mouseWheelUp() {
        const instance = InputManager.getInstance();
        return instance.mouseState.wheel > 0;
    }
    /**
     * Check if the mousewheel is scrolling down
     */
    static mouseWheelDown() {
        const instance = InputManager.getInstance();
        return instance.mouseState.wheel < 0;
    }
    /**
     * Get the current mouse position in screen-space
     */
    static get mousePosition() {
        const instance = InputManager.getInstance();
        return instance.mouseState.position;
    }
}
exports["default"] = InputManager;
InputManager.defaultOptions = {
    mouse: true,
    mouseWheel: true,
    keyboard: true,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUE0QztBQTZCNUMsTUFBcUIsWUFBWTtJQW1CL0IsWUFBb0IsT0FBK0I7UUFSM0Msa0JBQWEsR0FBa0IsRUFBRSxDQUFDO1FBRWxDLDBCQUFxQixHQUFrQixFQUFFLENBQUM7UUFFMUMsZUFBVSxHQUFlLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBQSxTQUFHLEdBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFFdEUsdUJBQWtCLEdBQWUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFBLFNBQUcsR0FBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUdwRixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxjQUFjLEVBQUUsT0FBTyxhQUFQLE9BQU8sY0FBUCxPQUFPLEdBQUksRUFBRSxDQUFDLENBQUM7UUFFN0Usd0JBQXdCO1FBQ3hCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDdEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNoQyxDQUFDLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO2dCQUN0QyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtnQkFDekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lB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
})();

/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/@basementuniverse/scene-manager/build/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@basementuniverse/scene-manager/build/index.js ***!
  \*********************************************************************/
/***/ ((module) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else { var i, a; }
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Scene = exports.SceneTransitionState = void 0;
var SceneTransitionState;
(function (SceneTransitionState) {
    SceneTransitionState[SceneTransitionState["In"] = 0] = "In";
    SceneTransitionState[SceneTransitionState["Out"] = 1] = "Out";
    SceneTransitionState[SceneTransitionState["None"] = 2] = "None";
})(SceneTransitionState = exports.SceneTransitionState || (exports.SceneTransitionState = {}));
function clamp(a, min = 0, max = 1) {
    return a < min ? min : (a > max ? max : a);
}
class SceneManager {
    constructor() {
        this.scenes = [];
    }
    /**
     * Initialise the scene manager for managing game scenes
     */
    static initialise() {
        if (SceneManager.instance) {
            throw new Error('SceneManager already initialised');
        }
        SceneManager.instance = new SceneManager();
    }
    static getInstance() {
        if (!SceneManager.instance) {
            throw new Error('SceneManager not properly initialised');
        }
        return SceneManager.instance;
    }
    /**
     * Push a scene onto the scene stack and start transitioning in
     */
    static push(scene) {
        const instance = SceneManager.getInstance();
        instance.scenes.push(scene);
        // Initialise the scene and start the transition
        scene.initialise();
        scene.transitionIn();
        return scene;
    }
    /**
     * Remove a scene from the scene stack after transitioning out
     */
    static pop() {
        const instance = SceneManager.getInstance();
        if (instance.scenes.length > 0) {
            let last = instance.scenes.length - 1;
            // Remove the top-most scene that isn't currently transitioning out
            while (last > 0 &&
                instance.scenes[last].transitionState === SceneTransitionState.Out) {
                last--;
            }
            if (last >= 0) {
                const scene = instance.scenes[last];
                // Start transitioning out
                scene.transitionOut();
                return scene;
            }
        }
        return undefined;
    }
    /**
     * Remove all scene from the scene stack
     */
    static clear() {
        const instance = SceneManager.getInstance();
        instance.scenes.forEach(scene => {
            if (scene.transitionState !== SceneTransitionState.Out) {
                scene.transitionOut();
            }
        });
    }
    /**
     * Update the scene manager and the current scene
     */
    static update(dt, ...args) {
        const instance = SceneManager.getInstance();
        if (instance.scenes.length > 0) {
            // Only update the top-most scene that isn't currently transitioning out
            for (let i = instance.scenes.length; i--;) {
                if (instance.scenes[i].transitionState !== SceneTransitionState.Out) {
                    instance.scenes[i].update(dt, ...args);
                    break;
                }
            }
            // Update all scene transitions
            instance.scenes.forEach(scene => {
                scene.updateTransition(dt);
            });
            // Remove any disposed scenes
            instance.scenes = instance.scenes.filter(scene => !scene.disposed);
        }
    }
    /**
     * Render scenes on the screen
     */
    static draw(context, ...args) {
        const instance = SceneManager.getInstance();
        // Figure out which scenes we need to draw
        const drawList = [];
        for (let i = instance.scenes.length; i--;) {
            const scene = instance.scenes[i];
            drawList.push(scene);
            // If transitioning, this scene is assumed to be transparent
            // (we might want to show the scene underneath if we're doing e.g. a fade)
            if (!scene.transparent &&
                scene.transitionState === SceneTransitionState.None) {
                break;
            }
        }
        // Draw the scenes in bottom -> top order
        drawList.reverse().forEach(scene => {
            scene.draw(context, ...args);
        });
    }
}
exports["default"] = SceneManager;
class Scene {
    constructor(options) {
        this.defaultOptions = {
            transitionTime: 2,
            transparent: true,
        };
        this.transitionState = SceneTransitionState.None;
        this.transitionAmount = 0;
        this.transitionTime = 0;
        this.transparent = false;
        this.disposed = false;
        const actualOptions = Object.assign({}, this.defaultOptions, options);
        this.transitionTime = actualOptions.transitionTime;
        this.transparent = actualOptions.transparent;
    }
    dispose() {
        this.disposed = true;
    }
    transitionIn() {
        this.transitionState = SceneTransitionState.In;
    }
    transitionOut() {
        this.transitionState = SceneTransitionState.Out;
    }
    updateTransition(dt) {
        const amount = dt / this.transitionTime;
        // Transitioning in
        if (this.transitionState === SceneTransitionState.In) {
            if (this.transitionAmount < 1) {
                this.transitionAmount = clamp(this.transitionAmount + amount);
            }
            else {
                this.transitionState = SceneTransitionState.None;
            }
        }
        // Transitioning out
        if (this.transitionState === SceneTransitionState.Out) {
            if (this.transitionAmount > 0) {
                this.transitionAmount = clamp(this.transitionAmount - amount);
            }
            else {
                this.dispose();
            }
        }
    }
}
exports.Scene = Scene;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFZQSxJQUFZLG9CQUlYO0FBSkQsV0FBWSxvQkFBb0I7SUFDOUIsMkRBQUUsQ0FBQTtJQUNGLDZEQUFHLENBQUE7SUFDSCwrREFBSSxDQUFBO0FBQ04sQ0FBQyxFQUpXLG9CQUFvQixHQUFwQiw0QkFBb0IsS0FBcEIsNEJBQW9CLFFBSS9CO0FBRUQsU0FBUyxLQUFLLENBQUMsQ0FBUyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDeEMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBcUIsWUFBWTtJQUsvQjtRQUZRLFdBQU0sR0FBWSxFQUFFLENBQUM7SUFFTixDQUFDO0lBRXhCOztPQUVHO0lBQ0ksTUFBTSxDQUFDLFVBQVU7UUFDdEIsSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztTQUNyRDtRQUNELFlBQVksQ0FBQyxRQUFRLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRU8sTUFBTSxDQUFDLFdBQVc7UUFDeEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBWTtRQUM3QixNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7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

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.ts"](0, __nested_webpack_exports__);
/******/ 	
/******/ 	return __nested_webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/@basementuniverse/utils/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@basementuniverse/utils/utils.js ***!
  \*******************************************************/
/***/ ((module) => {

/**
 * @overview A library of useful functions
 * @author Gordon Larrigan
 */

/**
 * Check if two numbers are approximately equal
 * @param {number} a Number a
 * @param {number} b Number b
 * @param {number} [p=Number.EPSILON] The precision value
 * @return {boolean} True if numbers a and b are approximately equal
 */
const floatEquals = (a, b, p = Number.EPSILON) => Math.abs(a - b) < p;

/**
 * Clamp a number between min and max
 * @param {number} a The number to clamp
 * @param {number} [min=0] The minimum value
 * @param {number} [max=1] The maximum value
 * @return {number} A clamped number
 */
const clamp = (a, min = 0, max = 1) => a < min ? min : (a > max ? max : a);

/**
 * Get the fractional part of a number
 * @param {number} a The number from which to get the fractional part
 * @return {number} The fractional part of the number
 */
const frac = a => a >= 0 ? a - Math.floor(a) : a - Math.ceil(a);

/**
 * Round n to d decimal places
 * @param {number} n The number to round
 * @param {number} [d=0] The number of decimal places to round to
 * @return {number} A rounded number
 */
const round = (n, d = 0) => {
  const p = Math.pow(10, d);
  return Math.round(n * p + Number.EPSILON) / p;
}

/**
 * Do a linear interpolation between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value, should be in the interval [0, 1]
 * @return {number} An interpolated value in the interval [a, b]
 */
const lerp = (a, b, i) => a + (b - a) * i;

/**
 * Get the position of i between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolated value in the interval [a, b]
 * @return {number} The position of i between a and b
 */
const unlerp = (a, b, i) => (i - a) / (b - a);

/**
 * Do a bilinear interpolation
 * @param {number} c00 Top-left value
 * @param {number} c10 Top-right value
 * @param {number} c01 Bottom-left value
 * @param {number} c11 Bottom-right value
 * @param {number} ix Interpolation value along x
 * @param {number} iy Interpolation value along y
 * @return {number} A bilinear interpolated value
 */
const blerp = (c00, c10, c01, c11, ix, iy) => lerp(lerp(c00, c10, ix), lerp(c01, c11, ix), iy);

/**
 * Re-map a number i from range a1...a2 to b1...b2
 * @param {number} i The number to re-map
 * @param {number} a1
 * @param {number} a2
 * @param {number} b1
 * @param {number} b2
 * @return {number}
 */
const remap = (i, a1, a2, b1, b2) => b1 + (i - a1) * (b2 - b1) / (a2 - a1);

/**
 * Do a smooth interpolation between a and b
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value
 * @return {number} An interpolated value in the interval [a, b]
 */
const smoothstep = (a, b, i) => lerp(a, b, 3 * Math.pow(i, 2) - 2 * Math.pow(i, 3));

/**
 * Get an angle in radians
 * @param {number} degrees The angle in degrees
 * @return {number} The angle in radians
 */
const radians = degrees => (Math.PI / 180) * degrees;

/**
 * Get an angle in degrees
 * @param {number} radians The angle in radians
 * @return {number} The angle in degrees
 */
const degrees = radians => (180 / Math.PI) * radians;

/**
 * Get a random float in the interval [min, max)
 * @param {number} min Inclusive min
 * @param {number} max Exclusive max
 * @return {number} A random float in the interval [min, max)
 */
const randomBetween = (min, max) => Math.random() * (max - min) + min;

/**
 * Get a random integer in the interval [min, max]
 * @param {number} min Inclusive min
 * @param {number} max Inclusive max
 * @return {number} A random integer in the interval [min, max]
 */
const randomIntBetween = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

/**
 * Get a normally-distributed random number
 * @param {number} [mu=0.5] The mean value
 * @param {number} [sigma=0.5] The standard deviation
 * @param {number} [samples=2] The number of samples
 * @return {number} A normally-distributed random number
 */
const cltRandom = (mu = 0.5, sigma = 0.5, samples = 2) => {
  let total = 0;
  for (let i = samples; i--;) {
    total += Math.random();
  }
  return mu + (total - samples / 2) / (samples / 2) * sigma;
};

/**
 * Get a normally-distributed random integer in the interval [min, max]
 * @param {number} min Inclusive min
 * @param {number} max Inclusive max
 * @return {number} A normally-distributed random integer
 */
const cltRandomInt = (min, max) => Math.floor(min + cltRandom(0.5, 0.5, 2) * (max + 1 - min));

/**
 * Return a weighted random integer
 * @param {Array<number>} w An array of weights
 * @return {number} An index from w
 */
const weightedRandom = w => {
  let total = w.reduce((a, i) => a + i, 0), n = 0;
  const r = Math.random() * total;
  while (total > r) {
    total -= w[n++];
  }
  return n - 1;
};

/**
 * An interpolation function
 * @callback InterpolationFunction
 * @param {number} a The minimum number
 * @param {number} b The maximum number
 * @param {number} i The interpolation value, should be in the interval [0, 1]
 * @return {number} The interpolated value in the interval [a, b]
 */

/**
 * Return an interpolated value from an array
 * @param {Array<number>} a An array of values interpolate
 * @param {number} i A number in the interval [0, 1]
 * @param {InterpolationFunction} [f=Math.lerp] The interpolation function to use
 * @return {number} An interpolated value in the interval [min(a), max(a)]
 */
const lerpArray = (a, i, f = lerp) => {
  const s = i * (a.length - 1);
  const p = clamp(Math.trunc(s), 0, a.length - 1);
  return f(a[p] || 0, a[p + 1] || 0, frac(s));
};

/**
 * Get the dot product of two vectors
 * @param {Array<number>} a Vector a
 * @param {Array<number>} b Vector b
 * @return {number} a âˆ™ b
 */
const dot = (a, b) => a.reduce((n, v, i) => n + v * b[i], 0);

/**
 * Get the factorial of a number
 * @param {number} a
 * @return {number} a!
 */
const factorial = a => {
  let result = 1;
  for (let i = 2; i <= a; i++) {
    result *= i;
  }
  return result;
};

/**
 * Get the number of permutations of r elements from a set of n elements
 * @param {number} n
 * @param {number} r
 * @return {number} nPr
 */
const npr = (n, r) => factorial(n) / factorial(n - r);

/**
 * Get the number of combinations of r elements from a set of n elements
 * @param {number} n
 * @param {number} r
 * @return {number} nCr
 */
const ncr = (n, r) => factorial(n) / (factorial(r) * factorial(n - r));

/**
 * Generate all combinations of r elements from an array
 *
 * @example
 * ```js
 * combinations([1, 2, 3], 2);
 * ```
 *
 * Output:
 * ```json
 * [
 *   [1, 2],
 *   [1, 3],
 *   [2, 3]
 * ]
 * ```
 * @param {Array<*>} a
 * @param {number} r The number of elements to choose in each combination
 * @return {Array<Array<*>>} An array of combination arrays
 */
const combinations = (a, r) => {
  if (r === 1) {
    return a.map(item => [item]);
  }

  return a.reduce(
    (acc, item, i) => [
      ...acc,
      ...combinations(a.slice(i + 1), r - 1).map(c => [item, ...c]),
    ],
    []
  );
};

/**
 * Get a cartesian product of arrays
 *
 * @example
 * ```js
 * cartesian([1, 2, 3], ['a', 'b']);
 * ```
 *
 * Output:
 * ```json
 * [
 *   [1, "a"],
 *   [1, "b"],
 *   [2, "a"],
 *   [2, "b"],
 *   [3, "a"],
 *   [3, "b"]
 * ]
 * ```
 */
const cartesian = (...arr) =>
  arr.reduce(
    (a, b) => a.flatMap(c => b.map(d => [...c, d])),
    [[]]
  );

/**
 * A function for generating array values
 * @callback TimesFunction
 * @param {number} i The array index
 * @return {*} The array value
 */

/**
 * Return a new array with length n by calling function f(i) on each element
 * @param {TimesFunction} f
 * @param {number} n The size of the array
 * @return {Array<*>}
 */
const times = (f, n) => Array(n).fill(0).map((_, i) => f(i));

/**
 * Return an array containing numbers 0->(n - 1)
 * @param {number} n The size of the array
 * @return {Array<number>} An array of integers 0->(n - 1)
 */
const range = n => times(i => i, n);

/**
 * Zip 2 arrays together, i.e. ([1, 2, 3], [a, b, c]) => [[1, a], [2, b], [3, c]]
 * @param {Array<*>} a
 * @param {Array<*>} b
 * @return {Array<Array<*>>}
 */
const zip = (a, b) => a.map((k, i) => [k, b[i]]);

/**
 * Return array[i] with positive and negative wrapping
 * @param {Array<*>} a
 * @param {number} i The positively/negatively wrapped array index
 * @return {*} An element from the array
 */
const at = (a, i) => a[i < 0 ? a.length - (Math.abs(i + 1) % a.length) - 1 : i % a.length];

/**
 * Return the last element of an array without removing it
 * @param {Array<*>} a
 * @return {*} The last element from the array
 */
const peek = (a) => {
  if (!a.length) {
    return undefined;
  }

  return a[a.length - 1];
};

/**
 * Chop an array into chunks of size n
 * @param {Array<*>} a
 * @param {number} n The chunk size
 * @return {Array<Array<*>>} An array of array chunks
 */
const chunk = (a, n) => times(i => a.slice(i * n, i * n + n), Math.ceil(a.length / n));

/**
 * Randomly shuffle a shallow copy of an array
 * @param {Array<*>} a
 * @return {Array<*>} The shuffled array
 */
const shuffle = a => a.slice().sort(() => Math.random() - 0.5);

/**
 * Flatten an object
 * @param {object} o
 * @param {string} concatenator The string to use for concatenating keys
 * @return {object} A flattened object
 */
const flat = (o, concatenator = '.') => {
  return Object.keys(o).reduce((acc, key) => {
    if (o[key] instanceof Date) {
      return {
        ...acc,
        [key]: o[key].toISOString(),
      };
    }

    if (typeof o[key] !== 'object' || !o[key]) {
      return {
        ...acc,
        [key]: o[key],
      };
    }
    const flattened = flat(o[key], concatenator);

    return {
      ...acc,
      ...Object.keys(flattened).reduce(
        (childAcc, childKey) => ({
          ...childAcc,
          [`${key}${concatenator}${childKey}`]: flattened[childKey],
        }),
        {}
      ),
    };
  }, {});
};

/**
 * Unflatten an object
 * @param {object} o
 * @param {string} concatenator The string to check for in concatenated keys
 * @return {object} An un-flattened object
 */
const unflat = (o, concatenator = '.') => {
  let result = {}, temp, substrings, property, i;

  for (property in o) {
    substrings = property.split(concatenator);
    temp = result;
    for (i = 0; i < substrings.length - 1; i++) {
      if (!(substrings[i] in temp)) {
        if (isFinite(substrings[i + 1])) {
          temp[substrings[i]] = [];
        } else {
          temp[substrings[i]] = {};
        }
      }
      temp = temp[substrings[i]];
    }
    temp[substrings[substrings.length - 1]] = o[property];
  }

  return result;
};

/**
 * A split predicate
 * @callback SplitPredicate
 * @param {any} value The current value
 * @return {boolean} True if the array should split at this index
 */

/**
 * Split an array into sub-arrays based on a predicate
 * @param {Array<*>} array
 * @param {SplitPredicate} predicate
 * @return {Array<Array<*>>} An array of arrays
 */
const split = (array, predicate) => {
  const result = [];
  let current = [];
  for (const value of array) {
    if (predicate(value)) {
      if (current.length) {
        result.push(current);
      }
      current = [value];
    } else {
      current.push(value);
    }
  }
  result.push(current);

  return result;
};

/**
 * Pluck keys from an object
 * @param {object} o
 * @param {...string} keys The keys to pluck from the object
 * @return {object} An object containing the plucked keys
 */
const pluck = (o, ...keys) => {
  return keys.reduce(
    (result, key) => Object.assign(result, { [key]: o[key] }),
    {}
  );
};

/**
 * Exclude keys from an object
 * @param {object} o
 * @param {...string} keys The keys to exclude from the object
 * @return {object} An object containing all keys except excluded keys
 */
const exclude = (o, ...keys) => {
  return Object.fromEntries(
    Object.entries(o).filter(([key]) => !keys.includes(key))
  );
};

if (true) {
  module.exports = {
    floatEquals,
    clamp,
    frac,
    round,
    lerp,
    unlerp,
    blerp,
    remap,
    smoothstep,
    radians,
    degrees,
    randomBetween,
    randomIntBetween,
    cltRandom,
    cltRandomInt,
    weightedRandom,
    lerpArray,
    dot,
    factorial,
    npr,
    ncr,
    combinations,
    cartesian,
    times,
    range,
    zip,
    at,
    peek,
    chunk,
    shuffle,
    flat,
    unflat,
    split,
    pluck,
    exclude,
  };
}


/***/ }),

/***/ "./node_modules/@basementuniverse/vec/vec.js":
/*!***************************************************!*\
  !*** ./node_modules/@basementuniverse/vec/vec.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { times, chunk, dot } = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");

/**
 * @overview A small vector and matrix library
 * @author Gordon Larrigan
 */

/**
 * A 2d vector
 * @typedef {Object} vec
 * @property {number} x The x component of the vector
 * @property {number} y The y component of the vector
 */

/**
 * Create a new vector
 * @param {number|vec} [x] The x component of the vector, or a vector to copy
 * @param {number} [y] The y component of the vector
 * @return {vec} A new vector
 * @example <caption>Various ways to initialise a vector</caption>
 * let a = vec(3, 2);  // (3, 2)
 * let b = vec(4);     // (4, 4)
 * let c = vec(a);     // (3, 2)
 * let d = vec();      // (0, 0)
 */
const vec = (x, y) => (!x && !y ?
  { x: 0, y: 0 } : (typeof x === 'object' ?
    { x: x.x || 0, y: x.y || 0 } : (y === null || y === undefined ?
      { x: x, y: x } : { x: x, y: y })
  )
);

/**
 * Get the components of a vector as an array
 * @param {vec} a The vector to get components from
 * @return {Array<number>} The vector components as an array
 */
vec.components = a => [a.x, a.y];

/**
 * Return a unit vector (1, 0)
 * @return {vec} A unit vector (1, 0)
 */
vec.ux = () => vec(1, 0);

/**
 * Return a unit vector (0, 1)
 * @return {vec} A unit vector (0, 1)
 */
vec.uy = () => vec(0, 1);

/**
 * Add vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {vec} a + b
 */
vec.add = (a, b) => ({ x: a.x + b.x, y: a.y + b.y });

/**
 * Scale a vector
 * @param {vec} a Vector a
 * @param {number} b Scalar b
 * @return {vec} a * b
 */
vec.mul = (a, b) => ({ x: a.x * b, y: a.y * b });

/**
 * Subtract vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {vec} a - b
 */
vec.sub = (a, b) => ({ x: a.x - b.x, y: a.y - b.y });

/**
 * Get the length of a vector
 * @param {vec} a Vector a
 * @return {number} |a|
 */
vec.len = a => Math.sqrt(a.x * a.x + a.y * a.y);

/**
 * Get the length of a vector using taxicab geometry
 * @param {vec} a Vector a
 * @return {number} |a|
 */
vec.manhattan = a => Math.abs(a.x) + Math.abs(a.y);

/**
 * Normalise a vector
 * @param {vec} a The vector to normalise
 * @return {vec} ^a
 */
vec.nor = a => {
  let len = vec.len(a);
  return len ? { x: a.x / len, y: a.y / len } : vec();
};

/**
 * Get a dot product of vectors
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {number} a âˆ™ b
 */
vec.dot = (a, b) => a.x * b.x + a.y * b.y;

/**
 * Rotate a vector by r radians
 * @param {vec} a The vector to rotate
 * @param {number} r The angle to rotate by, measured in radians
 * @return {vec} A rotated vector
 */
vec.rot = (a, r) => {
  let s = Math.sin(r),
    c = Math.cos(r);
  return { x: c * a.x - s * a.y, y: s * a.x + c * a.y };
}

/**
 * Check if two vectors are equal
 * @param {vec} a Vector a
 * @param {vec} b Vector b
 * @return {boolean} True if vectors a and b are equal, false otherwise
 */
vec.eq = (a, b) => a.x === b.x && a.y === b.y;

/**
 * Get the angle of a vector
 * @param {vec} a Vector a
 * @return {number} The angle of vector a in radians
 */
vec.rad = a => Math.atan2(a.y, a.x);

/**
 * Copy a vector
 * @param {vec} a The vector to copy
 * @return {vec} A copy of vector a
 */
vec.cpy = a => vec(a);

/**
 * A function to call on each component of a vector
 * @callback vectorMapCallback
 * @param {number} value The component value
 * @param {'x' | 'y'} label The component label (x or y)
 * @return {number} The mapped component
 */

/**
 * Call a function on each component of a vector and build a new vector from the results
 * @param {vec} a Vector a
 * @param {vectorMapCallback} f The function to call on each component of the vector
 * @return {vec} Vector a mapped through f
 */
vec.map = (a, f) => ({ x: f(a.x, 'x'), y: f(a.y, 'y') });

/**
 * Convert a vector into a string
 * @param {vec} a The vector to convert
 * @param {string} [s=', '] The separator string
 * @return {string} A string representation of the vector
 */
vec.str = (a, s = ', ') => `${a.x}${s}${a.y}`;

/**
 * A matrix
 * @typedef {Object} mat
 * @property {number} m The number of rows in the matrix
 * @property {number} n The number of columns in the matrix
 * @property {Array<number>} entries The matrix values
 */

/**
 * Create a new matrix
 * @param {number} [m=4] The number of rows
 * @param {number} [n=4] The number of columns
 * @param {Array<number>} [entries=[]] Matrix values in reading order
 * @return {mat} A new matrix
 */
const mat = (m = 4, n = 4, entries = []) => ({
  m, n,
  entries: entries.concat(Array(m * n).fill(0)).slice(0, m * n)
});

/**
 * Get an identity matrix of size n
 * @param {number} n The size of the matrix
 * @return {mat} An identity matrix
 */
mat.identity = n => mat(n, n, Array(n * n).fill(0).map((v, i) => +(Math.floor(i / n) === i % n)));

/**
 * Get an entry from a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @return {number} The value at position (i, j) in matrix a
 */
mat.get = (a, i, j) => a.entries[(j - 1) + (i - 1) * a.n];

/**
 * Set an entry of a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @param {number} v The value to set in matrix a
 */
mat.set = (a, i, j, v) => { a.entries[(j - 1) + (i - 1) * a.n] = v; };

/**
 * Get a row from a matrix as an array
 * @param {mat} a Matrix a
 * @param {number} m The row offset
 * @return {Array<number>} Row m from matrix a
 */
mat.row = (a, m) => {
  const s = (m - 1) * a.n;
  return a.entries.slice(s, s + a.n);
};

/**
 * Get a column from a matrix as an array
 * @param {mat} a Matrix a
 * @param {number} n The column offset
 * @return {Array<number>} Column n from matrix a
 */
mat.col = (a, n) => times(i => mat.get(a, (i + 1), n), a.m);

/**
 * Add matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat} a + b
 */
mat.add = (a, b) => a.m === b.m && a.n === b.n && mat.map(a, (v, i) => v + b.entries[i]);

/**
 * Subtract matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat} a - b
 */
mat.sub = (a, b) => a.m === b.m && a.n === b.n && mat.map(a, (v, i) => v - b.entries[i]);

/**
 * Multiply matrices
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {mat|boolean} ab or false if the matrices cannot be multiplied
 */
mat.mul = (a, b) => {
  if (a.n !== b.m) { return false; }
  const result = mat(a.m, b.n);
  for (let i = 1; i <= a.m; i++) {
    for (let j = 1; j <= b.n; j++) {
      mat.set(result, i, j, dot(mat.row(a, i), mat.col(b, j)));
    }
  }
  return result;
};

/**
 * Scale a matrix
 * @param {mat} a Matrix a
 * @param {number} b Scalar b
 * @return {mat} a * b
 */
mat.scale = (a, b) => mat.map(a, v => v * b);

/**
 * Transpose a matrix
 * @param {mat} a The matrix to transpose
 * @return {mat} A transposed matrix
 */
mat.trans = a => mat(a.n, a.m, times(i => mat.col(a, (i + 1)), a.n).flat());

/**
 * Get the minor of a matrix
 * @param {mat} a Matrix a
 * @param {number} i The row offset
 * @param {number} j The column offset
 * @return {mat|boolean} The (i, j) minor of matrix a or false if the matrix is not square
 */
mat.minor = (a, i, j) => {
  if (a.m !== a.n) { return false; }
  const entries = [];
  for (let ii = 1; ii <= a.m; ii++) {
    if (ii === i) { continue; }
    for (let jj = 1; jj <= a.n; jj++) {
      if (jj === j) { continue; }
      entries.push(mat.get(a, ii, jj));
    }
  }
  return mat(a.m - 1, a.n - 1, entries);
};

/**
 * Get the determinant of a matrix
 * @param {mat} a Matrix a
 * @return {number|boolean} |a| or false if the matrix is not square
 */
mat.det = a => {
  if (a.m !== a.n) { return false; }
  if (a.m === 1) {
    return a.entries[0];
  }
  if (a.m === 2) {
    return a.entries[0] * a.entries[3] - a.entries[1] * a.entries[2];
  }
  let total = 0, sign = 1;
  for (let j = 1; j <= a.n; j++) {
    total += sign * a.entries[j - 1] * mat.det(mat.minor(a, 1, j));
    sign *= -1;
  }
  return total;
};

/**
 * Normalise a matrix
 * @param {mat} a The matrix to normalise
 * @return {mat|boolean} ^a or false if the matrix is not square
 */
mat.nor = a => {
  if (a.m !== a.n) { return false; }
  const d = mat.det(a);
  return mat.map(a, i => i * d);
};

/**
 * Get the adjugate of a matrix
 * @param {mat} a The matrix from which to get the adjugate
 * @return {mat} The adjugate of a
 */
mat.adj = a => {
  const minors = mat(a.m, a.n);
  for (let i = 1; i <= a.m; i++) {
    for (let j = 1; j <= a.n; j++) {
      mat.set(minors, i, j, mat.det(mat.minor(a, i, j)));
    }
  }
  const cofactors = mat.map(minors, (v, i) => v * (i % 2 ? -1 : 1));
  return mat.trans(cofactors);
};

/**
 * Get the inverse of a matrix
 * @param {mat} a The matrix to invert
 * @return {mat|boolean} a^-1 or false if the matrix has no inverse
 */
mat.inv = a => {
  if (a.m !== a.n) { return false; }
  const d = mat.det(a);
  if (d === 0) { return false; }
  return mat.scale(mat.adj(a), 1 / d);
};

/**
 * Check if two matrices are equal
 * @param {mat} a Matrix a
 * @param {mat} b Matrix b
 * @return {boolean} True if matrices a and b are identical, false otherwise
 */
mat.eq = (a, b) => a.m === b.m && a.n === b.n && mat.str(a) === mat.str(b);

/**
 * Copy a matrix
 * @param {mat} a The matrix to copy
 * @return {mat} A copy of matrix a
 */
mat.cpy = a => mat(a.m, a.n, [...a.entries]);

/**
 * A function to call on each entry of a matrix
 * @callback matrixMapCallback
 * @param {number} value The entry value
 * @param {number} index The entry index
 * @param {Array<number>} entries The array of matrix entries
 * @return {number} The mapped entry
 */

/**
 * Call a function on each entry of a matrix and build a new matrix from the results
 * @param {mat} a Matrix a
 * @param {matrixMapCallback} f The function to call on each entry of the matrix
 * @return {mat} Matrix a mapped through f
 */
mat.map = (a, f) => mat(a.m, a.n, a.entries.map(f));

/**
 * Convert a matrix into a string
 * @param {mat} a The matrix to convert
 * @param {string} [ms=', '] The separator string for columns
 * @param {string} [ns='\n'] The separator string for rows
 * @return {string} A string representation of the matrix
 */
mat.str = (a, ms = ', ', ns = '\n') => chunk(a.entries, a.n).map(r => r.join(ms)).join(ns);

if (true) {
  module.exports = { vec, mat };
}


/***/ }),

/***/ "./src/Button.ts":
/*!***********************!*\
  !*** ./src/Button.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Button = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const input_manager_1 = __webpack_require__(/*! @basementuniverse/input-manager */ "./node_modules/@basementuniverse/input-manager/build/index.js");
const utilities_1 = __webpack_require__(/*! ./utilities */ "./src/utilities.ts");
class Button {
    constructor(position, size, image, colour, label, onClick) {
        this.position = position;
        this.size = size;
        this.image = image;
        this.colour = colour;
        this.label = label;
        this.onClick = onClick;
        this.hover = false;
        this.active = false;
    }
    update(camera) {
        this.bounds = {
            left: this.position.x,
            right: this.position.x + this.size.x,
            top: this.position.y,
            bottom: this.position.y + this.size.y,
        };
        this.hover = false;
        if ((0, utilities_1.intersectPointAABB)(camera.positionToWorld(input_manager_1.default.mousePosition), this.bounds)) {
            this.hover = true;
            if (input_manager_1.default.mousePressed()) {
                const sound = content_manager_1.default.get('button-sound');
                if (sound) {
                    sound.play();
                }
                this.onClick();
            }
        }
    }
    draw(context) {
        var _a;
        context.save();
        if (this.active) {
            context.fillStyle = '#ffffaa33';
            context.beginPath();
            context.arc(this.position.x + this.size.x / 2, this.position.y + this.size.y / 2, this.size.x * 0.75, 0, Math.PI * 2);
            context.fill();
        }
        if (this.image) {
            const image = content_manager_1.default.get(this.image);
            const s = this.hover ? 5 : 0;
            if (image) {
                context.drawImage(image, this.position.x - s / 2, this.position.y - s / 2, this.size.x + s, this.size.y + s);
            }
        }
        if (this.colour) {
            context.strokeStyle = this.colour;
            context.lineWidth = this.hover ? 4 : 2;
            context.strokeRect(this.position.x, this.position.y, this.size.x, this.size.y);
        }
        if (this.label) {
            context.font = this.hover ? 'bold 18px monospace' : '16px monospace';
            context.fillStyle = (_a = this.colour) !== null && _a !== void 0 ? _a : 'white';
            context.textAlign = 'center';
            context.textBaseline = 'middle';
            context.fillText(this.label, this.position.x + this.size.x / 2, this.position.y + this.size.y / 2);
        }
        context.restore();
    }
}
exports.Button = Button;


/***/ }),

/***/ "./src/Customer.ts":
/*!*************************!*\
  !*** ./src/Customer.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Customer = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
class Customer {
    constructor() {
        this.status = 'pending';
        this.speech = Customer.DEFAULT_SPEECH;
    }
    reset() {
        this.status = 'pending';
        this.speech = Customer.DEFAULT_SPEECH;
    }
    draw(context, camera) {
        context.save();
        let customerImageName = 'customer-waiting';
        if (this.status === 'served-happy') {
            customerImageName = 'customer-happy';
        }
        if (this.status === 'served-angry') {
            customerImageName = 'customer-angry';
        }
        const customerImage = content_manager_1.default.get(customerImageName);
        if (customerImage) {
            context.drawImage(customerImage, camera.bounds.right - 300, camera.bounds.bottom - 200, 200, 200);
        }
        if (this.speech) {
            const speechBubbleImage = content_manager_1.default.get('speech-bubble');
            if (speechBubbleImage) {
                context.drawImage(speechBubbleImage, camera.bounds.right - 250, camera.bounds.bottom - 350, 200, 200);
                context.font = '16px sans-serif';
                context.fillStyle = 'black';
                context.textAlign = 'center';
                context.textBaseline = 'middle';
                const text = this.speech.split('\n');
                let y = 0;
                for (let i = 0; i < text.length; i++) {
                    context.fillText(text[i], camera.bounds.right - 155, camera.bounds.bottom - 280 + y);
                    y += 20;
                }
            }
        }
        context.restore();
    }
}
exports.Customer = Customer;
Customer.DEFAULT_SPEECH = `Make me a\npepperoni pizza!`;


/***/ }),

/***/ "./src/FactoryFloor.ts":
/*!*****************************!*\
  !*** ./src/FactoryFloor.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FactoryFloor = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const input_manager_1 = __webpack_require__(/*! @basementuniverse/input-manager */ "./node_modules/@basementuniverse/input-manager/build/index.js");
const utils_1 = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Item_1 = __webpack_require__(/*! ./Item */ "./src/Item.ts");
const Blender_1 = __webpack_require__(/*! ./machines/Blender */ "./src/machines/Blender.ts");
const Combiner_1 = __webpack_require__(/*! ./machines/Combiner */ "./src/machines/Combiner.ts");
const Conveyor_1 = __webpack_require__(/*! ./machines/Conveyor */ "./src/machines/Conveyor.ts");
const Dispenser_1 = __webpack_require__(/*! ./machines/Dispenser */ "./src/machines/Dispenser.ts");
const Grater_1 = __webpack_require__(/*! ./machines/Grater */ "./src/machines/Grater.ts");
const Machine_1 = __webpack_require__(/*! ./machines/Machine */ "./src/machines/Machine.ts");
const Oven_1 = __webpack_require__(/*! ./machines/Oven */ "./src/machines/Oven.ts");
const Roller_1 = __webpack_require__(/*! ./machines/Roller */ "./src/machines/Roller.ts");
const ServingCounter_1 = __webpack_require__(/*! ./machines/ServingCounter */ "./src/machines/ServingCounter.ts");
const Slicer_1 = __webpack_require__(/*! ./machines/Slicer */ "./src/machines/Slicer.ts");
class FactoryFloor {
    constructor(size) {
        this.width = 10;
        this.height = 10;
        this.state = [];
        this.newState = [];
        this.tickCount = 0;
        this.servingCounterValid = null;
        if (size) {
            this.width = size.x;
            this.height = size.y;
        }
    }
    initialise() {
        this.state = [];
        const testFactory = [
            new Dispenser_1.Dispenser({
                position: (0, vec_1.vec)(1, 0),
                direction: 'down',
                item: new Item_1.Item(['cheese']),
            }),
            new Dispenser_1.Dispenser({
                position: (0, vec_1.vec)(3, 0),
                direction: 'down',
                item: new Item_1.Item(['tomato']),
            }),
            new Dispenser_1.Dispenser({
                position: (0, vec_1.vec)(5, 0),
                direction: 'down',
                item: new Item_1.Item(['dough']),
            }),
            new Dispenser_1.Dispenser({
                position: (0, vec_1.vec)(7, 0),
                direction: 'down',
                item: new Item_1.Item(['salami']),
            }),
            new ServingCounter_1.ServingCounter({
                position: (0, vec_1.vec)(1, 9),
                direction: 'down',
                expectedItem: new Item_1.Item([
                    'dough_rolled_cooked',
                    'cheese_grated_cooked',
                    'tomato_blended_cooked',
                    'salami_sliced_cooked',
                ]),
            }),
        ];
        this.state = testFactory;
    }
    addMachine(machine) {
        const placeSound = content_manager_1.default.get('place-sound');
        if (placeSound) {
            placeSound.play();
        }
        this.state.push(machine);
    }
    removeMachine(p) {
        const destroySound = content_manager_1.default.get('destroy-sound');
        if (destroySound) {
            destroySound.play();
        }
        this.state = this.state.filter(machine => !vec_1.vec.eq(machine.position, p));
    }
    findAdjacentMachine(p, direction) {
        const adjacentPosition = vec_1.vec.add(p, direction);
        return this.findMachine(adjacentPosition);
    }
    findMachine(p) {
        return this.state.find(machine => vec_1.vec.eq(machine.position, p)) || null;
    }
    adjustDirection(direction, facing) {
        return FactoryFloor.FACINGS[facing](direction);
    }
    tick(game) {
        this.tickCount++;
        this.newState = [];
        let dispense = false;
        if (game.customers.length > 0 && game.customers[0].status === 'pending') {
            game.customers[0].status = 'waiting';
            dispense = true;
        }
        let previousServingCounterValid = this.servingCounterValid;
        for (const machine of this.state) {
            if (machine instanceof Dispenser_1.Dispenser) {
                this.newState.push(machine.tick(this, dispense));
            }
            else {
                this.newState.push(machine.tick(this));
            }
        }
        if (previousServingCounterValid === null) {
            if (this.servingCounterValid === true) {
                game.win();
            }
            if (this.servingCounterValid === false) {
                game.lose();
            }
        }
        this.state = this.newState;
    }
    reset() {
        this.state = this.state.map(machine => machine.reset());
    }
    update(dt, camera, toolMode) {
        for (const machine of this.state) {
            machine.update(dt);
        }
        const floorSize = vec_1.vec.mul((0, vec_1.vec)(this.width, this.height), FactoryFloor.TILE_SIZE);
        const start = vec_1.vec.sub(camera.position, vec_1.vec.mul(floorSize, 0.5));
        if (input_manager_1.default.mousePressed()) {
            const mouse = camera.positionToWorld(input_manager_1.default.mousePosition);
            const p = (0, vec_1.vec)(Math.floor((mouse.x - start.x) / FactoryFloor.TILE_SIZE), Math.floor((mouse.y - start.y) / FactoryFloor.TILE_SIZE));
            if (p.x >= 0 && p.x < this.width && p.y >= 0 && p.y < this.height) {
                const machine = this.findMachine(p);
                switch (toolMode) {
                    case 'select':
                        break;
                    case 'rotate':
                        if (machine) {
                            if (machine instanceof Conveyor_1.Conveyor) {
                                const currentDirection = `${machine.direction}_${machine.input}`;
                                const index = Conveyor_1.Conveyor.ROTATIONS.indexOf(currentDirection);
                                const [newDirection, newInput] = Conveyor_1.Conveyor.ROTATIONS[(index + 1) % Conveyor_1.Conveyor.ROTATIONS.length].split('_');
                                machine.direction = newDirection;
                                machine.input = newInput;
                                break;
                            }
                            if (machine instanceof Dispenser_1.Dispenser) {
                                break;
                            }
                            const index = Machine_1.Machine.ROTATIONS.indexOf(machine.direction);
                            machine.direction = Machine_1.Machine.ROTATIONS[(index + 1) % Machine_1.Machine.ROTATIONS.length];
                        }
                        break;
                    case 'delete':
                        if (machine) {
                            if (machine instanceof Dispenser_1.Dispenser) {
                                break;
                            }
                            if (machine instanceof ServingCounter_1.ServingCounter) {
                                break;
                            }
                            this.removeMachine(p);
                        }
                        break;
                    case 'create-conveyor':
                        if (machine) {
                            break;
                        }
                        this.addMachine(new Conveyor_1.Conveyor({ position: p }));
                        break;
                    case 'create-combiner':
                        if (machine) {
                            break;
                        }
                        this.addMachine(new Combiner_1.Combiner({ position: p, direction: 'right' }));
                        break;
                    case 'create-oven':
                        if (machine) {
                            break;
                        }
                        this.addMachine(new Oven_1.Oven({ position: p, direction: 'right' }));
                        break;
                    case 'create-slicer':
                        if (machine) {
                            break;
                        }
                        this.addMachine(new Slicer_1.Slicer({ position: p, direction: 'right' }));
                        break;
                    case 'create-grater':
                        if (machine) {
                            break;
                        }
                        this.addMachine(new Grater_1.Grater({ position: p, direction: 'right' }));
                        break;
                    case 'create-roller':
                        if (machine) {
                            break;
                        }
                        this.addMachine(new Roller_1.Roller({ position: p, direction: 'right' }));
                        break;
                    case 'create-blender':
                        if (machine) {
                            break;
                        }
                        this.addMachine(new Blender_1.Blender({ position: p, direction: 'right' }));
                        break;
                }
            }
        }
    }
    draw(context, camera) {
        const floorSize = vec_1.vec.mul((0, vec_1.vec)(this.width, this.height), FactoryFloor.TILE_SIZE);
        const start = vec_1.vec.sub(camera.position, vec_1.vec.mul(floorSize, 0.5));
        context.save();
        context.translate(start.x, start.y);
        for (let y = 0; y < this.height; y++) {
            for (let x = 0; x < this.width; x++) {
                const p = (0, vec_1.vec)(x * FactoryFloor.TILE_SIZE, y * FactoryFloor.TILE_SIZE);
                const s = (0, vec_1.vec)(FactoryFloor.TILE_SIZE, FactoryFloor.TILE_SIZE);
                this.drawEmptyTile(context, p, s, x % 2 === y % 2);
            }
        }
        for (const machine of this.state) {
            machine.draw(context, FactoryFloor.TILE_SIZE);
        }
        context.restore();
    }
    drawEmptyTile(context, p, s, odd = false) {
        context.save();
        context.fillStyle = odd ? '#ffffff20' : '#00000020';
        context.fillRect(p.x, p.y, s.x, s.y);
        context.restore();
    }
    debugOutput() {
        console.table((0, utils_1.times)(y => (0, utils_1.times)(x => { var _a; return ((_a = this.findMachine((0, vec_1.vec)(x, y))) === null || _a === void 0 ? void 0 : _a.debugOutput()) || '-'; }, this.width), this.height));
    }
}
exports.FactoryFloor = FactoryFloor;
FactoryFloor.TILE_SIZE = 80;
FactoryFloor.DIRECTIONS = {
    left: (0, vec_1.vec)(-1, 0),
    right: (0, vec_1.vec)(1, 0),
    up: (0, vec_1.vec)(0, -1),
    down: (0, vec_1.vec)(0, 1),
};
FactoryFloor.FACINGS = {
    front: (direction) => FactoryFloor.DIRECTIONS[direction],
    back: (direction) => (0, vec_1.vec)(FactoryFloor.DIRECTIONS[direction].x * -1, FactoryFloor.DIRECTIONS[direction].y * -1),
    left: (direction) => (0, vec_1.vec)(FactoryFloor.DIRECTIONS[direction].y, FactoryFloor.DIRECTIONS[direction].x * -1),
    right: (direction) => (0, vec_1.vec)(FactoryFloor.DIRECTIONS[direction].y * -1, FactoryFloor.DIRECTIONS[direction].x),
};


/***/ }),

/***/ "./src/Game.ts":
/*!*********************!*\
  !*** ./src/Game.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const debug_1 = __webpack_require__(/*! @basementuniverse/debug */ "./node_modules/@basementuniverse/debug/build/index.js");
const input_manager_1 = __webpack_require__(/*! @basementuniverse/input-manager */ "./node_modules/@basementuniverse/input-manager/build/index.js");
const scene_manager_1 = __webpack_require__(/*! @basementuniverse/scene-manager */ "./node_modules/@basementuniverse/scene-manager/build/index.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const LoadingScene_1 = __webpack_require__(/*! ./LoadingScene */ "./src/LoadingScene.ts");
const config = __webpack_require__(/*! ./config.json */ "./src/config.json");
const constants = __webpack_require__(/*! ./constants */ "./src/constants.ts");
class Game {
    constructor(container) {
        this.frameRate = 0;
        this.frameCount = 0;
        if (container === null) {
            throw new Error('A valid container element must be specified.');
        }
        if (container.tagName.toLowerCase() !== 'canvas') {
            throw new Error('Container element must be a canvas.');
        }
        this.canvas = container;
        const context = this.canvas.getContext('2d');
        if (context !== null) {
            this.context = context;
        }
        else {
            throw new Error("Couldn't get a 2d context.");
        }
        window.addEventListener('resize', this.resize.bind(this), false);
        this.resize();
    }
    resize() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }
    initialise() {
        content_manager_1.default.initialise({
            simulateSlowLoading: constants.DEBUG,
            slowLoadingTimeMin: 0,
            slowLoadingTimeMax: 50,
        });
        debug_1.default.initialise();
        input_manager_1.default.initialise();
        scene_manager_1.default.initialise();
        this.lastFrameTime = this.lastFrameCountTime = performance.now();
        this.loop();
        scene_manager_1.default.push(new LoadingScene_1.LoadingScene());
    }
    loop() {
        const now = performance.now();
        const elapsedTime = Math.min(now - this.lastFrameTime, constants.FPS_MIN);
        if (now - this.lastFrameCountTime >= 1000) {
            this.lastFrameCountTime = now;
            this.frameRate = this.frameCount;
            this.frameCount = 0;
        }
        this.frameCount++;
        this.lastFrameTime = now;
        if (config.showFPS) {
            debug_1.default.value('FPS', this.frameRate, { align: 'right' });
        }
        this.update(elapsedTime);
        this.draw();
        window.requestAnimationFrame(this.loop.bind(this));
    }
    update(dt) {
        Game.screen = (0, vec_1.vec)(this.canvas.width, this.canvas.height);
        scene_manager_1.default.update(dt);
        input_manager_1.default.update();
    }
    draw() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        scene_manager_1.default.draw(this.context);
        debug_1.default.draw(this.context);
    }
}
exports["default"] = Game;


/***/ }),

/***/ "./src/GameScene.ts":
/*!**************************!*\
  !*** ./src/GameScene.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GameScene = void 0;
const camera_1 = __webpack_require__(/*! @basementuniverse/camera */ "./node_modules/@basementuniverse/camera/build/index.js");
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const debug_1 = __webpack_require__(/*! @basementuniverse/debug */ "./node_modules/@basementuniverse/debug/build/index.js");
const input_manager_1 = __webpack_require__(/*! @basementuniverse/input-manager */ "./node_modules/@basementuniverse/input-manager/build/index.js");
const scene_manager_1 = __webpack_require__(/*! @basementuniverse/scene-manager */ "./node_modules/@basementuniverse/scene-manager/build/index.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Button_1 = __webpack_require__(/*! ./Button */ "./src/Button.ts");
const Customer_1 = __webpack_require__(/*! ./Customer */ "./src/Customer.ts");
const FactoryFloor_1 = __webpack_require__(/*! ./FactoryFloor */ "./src/FactoryFloor.ts");
const Game_1 = __webpack_require__(/*! ./Game */ "./src/Game.ts");
const HelpScene_1 = __webpack_require__(/*! ./HelpScene */ "./src/HelpScene.ts");
class GameScene extends scene_manager_1.Scene {
    constructor() {
        super({
            transitionTime: GameScene.TRANSITION_TIME,
        });
        this.customers = [];
        this.playing = false;
        this.tickTimer = 0;
        this.toolMode = 'select';
        this.music = null;
    }
    play() {
        this.playing = true;
        this.playButton.label = 'Stop';
        this.playButton.colour = '#f56262';
    }
    stop() {
        this.playing = false;
        this.playButton.label = 'Start';
        this.playButton.colour = '#89cc87';
    }
    win() {
        this.stop();
        if (this.customers.length > 0) {
            this.customers[0].status = 'served-happy';
            this.customers[0].speech = 'Yay!';
        }
        const winSound = content_manager_1.default.get('win-sound');
        if (winSound) {
            winSound.play();
        }
    }
    lose() {
        this.stop();
        if (this.customers.length > 0) {
            this.customers[0].status = 'served-angry';
            this.customers[0].speech = 'That was terrible!';
        }
        const loseSound = content_manager_1.default.get('lose-sound');
        if (loseSound) {
            loseSound.play();
        }
    }
    initialise() {
        this.camera = new camera_1.default((0, vec_1.vec)());
        this.playButton = new Button_1.Button((0, vec_1.vec)(this.camera.bounds.left + 10, this.camera.bounds.bottom - 40), (0, vec_1.vec)(100, 30), null, '#89cc87', 'Start', () => {
            if (this.playing) {
                this.stop();
            }
            else {
                this.play();
            }
        });
        this.stepButton = new Button_1.Button((0, vec_1.vec)(this.camera.bounds.left + 120, this.camera.bounds.bottom - 40), (0, vec_1.vec)(100, 30), null, 'white', 'Step', () => {
            this.factoryFloor.tick(this);
        });
        this.resetButton = new Button_1.Button((0, vec_1.vec)(this.camera.bounds.left + 230, this.camera.bounds.bottom - 40), (0, vec_1.vec)(100, 30), null, 'white', 'Reset', () => {
            this.factoryFloor.reset();
            for (const customer of this.customers) {
                customer.reset();
            }
        });
        const toolbarStart = this.camera.position.x - GameScene.TOOLBAR_WIDTH / 2;
        this.selectButton = new Button_1.Button((0, vec_1.vec)(toolbarStart, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'select', null, '', () => {
            this.toolMode = 'select';
        });
        this.rotateButton = new Button_1.Button((0, vec_1.vec)(toolbarStart + 50 + 20, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'rotate', null, '', () => {
            this.toolMode = 'rotate';
        });
        this.deleteButton = new Button_1.Button((0, vec_1.vec)(toolbarStart + 100 + 40, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'delete', null, '', () => {
            this.toolMode = 'delete';
        });
        this.createConveyorButton = new Button_1.Button((0, vec_1.vec)(toolbarStart + 150 + 60, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'conveyor-right', null, '', () => {
            this.toolMode = 'create-conveyor';
        });
        this.createCombinerButton = new Button_1.Button((0, vec_1.vec)(toolbarStart + 200 + 80, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'combiner-right', null, '', () => {
            this.toolMode = 'create-combiner';
        });
        this.createOvenButton = new Button_1.Button((0, vec_1.vec)(toolbarStart + 250 + 100, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'oven-right', null, '', () => {
            this.toolMode = 'create-oven';
        });
        this.createSlicerButton = new Button_1.Button((0, vec_1.vec)(toolbarStart + 300 + 120, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'slicer-right', null, '', () => {
            this.toolMode = 'create-slicer';
        });
        this.createGraterButton = new Button_1.Button((0, vec_1.vec)(toolbarStart + 350 + 140, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'grater-right', null, '', () => {
            this.toolMode = 'create-grater';
        });
        this.createRollerButton = new Button_1.Button((0, vec_1.vec)(toolbarStart + 400 + 160, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'roller-right', null, '', () => {
            this.toolMode = 'create-roller';
        });
        this.createBlenderButton = new Button_1.Button((0, vec_1.vec)(toolbarStart + 450 + 180, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'blender-right', null, '', () => {
            this.toolMode = 'create-blender';
        });
        this.helpButton = new Button_1.Button((0, vec_1.vec)(toolbarStart + 500 + 200, this.camera.bounds.top + 10), (0, vec_1.vec)(50, 50), 'help', null, '', () => {
            scene_manager_1.default.push(new HelpScene_1.HelpScene());
        });
        const music = content_manager_1.default.get('game-music');
        if (music) {
            this.music = music;
            this.music.loop = true;
            this.music.volume = 0.3;
            this.music.play();
        }
        this.customers.push(new Customer_1.Customer());
        this.factoryFloor = new FactoryFloor_1.FactoryFloor();
        this.factoryFloor.initialise();
    }
    update(dt) {
        if (input_manager_1.default.keyPressed('Escape')) {
            if (this.music) {
                this.music.pause();
                this.music.currentTime = 0;
            }
            scene_manager_1.default.pop();
        }
        debug_1.default.value('ticks', this.factoryFloor.tickCount);
        debug_1.default.value('tool', this.toolMode);
        this.playButton.position = (0, vec_1.vec)(this.camera.bounds.left + 10, this.camera.bounds.bottom - 40);
        this.playButton.update(this.camera);
        this.stepButton.position = (0, vec_1.vec)(this.camera.bounds.left + 120, this.camera.bounds.bottom - 40);
        this.stepButton.update(this.camera);
        this.resetButton.position = (0, vec_1.vec)(this.camera.bounds.left + 230, this.camera.bounds.bottom - 40);
        this.resetButton.update(this.camera);
        const toolbarStart = this.camera.position.x - GameScene.TOOLBAR_WIDTH / 2;
        this.selectButton.position = (0, vec_1.vec)(toolbarStart, this.camera.bounds.top + 10);
        this.selectButton.update(this.camera);
        this.selectButton.active = this.toolMode === 'select';
        this.rotateButton.position = (0, vec_1.vec)(toolbarStart + 50 + 20, this.camera.bounds.top + 10);
        this.rotateButton.update(this.camera);
        this.rotateButton.active = this.toolMode === 'rotate';
        this.deleteButton.position = (0, vec_1.vec)(toolbarStart + 100 + 40, this.camera.bounds.top + 10);
        this.deleteButton.update(this.camera);
        this.deleteButton.active = this.toolMode === 'delete';
        this.createConveyorButton.position = (0, vec_1.vec)(toolbarStart + 150 + 60, this.camera.bounds.top + 10);
        this.createConveyorButton.update(this.camera);
        this.createConveyorButton.active = this.toolMode === 'create-conveyor';
        this.createCombinerButton.position = (0, vec_1.vec)(toolbarStart + 200 + 80, this.camera.bounds.top + 10);
        this.createCombinerButton.update(this.camera);
        this.createCombinerButton.active = this.toolMode === 'create-combiner';
        this.createOvenButton.position = (0, vec_1.vec)(toolbarStart + 250 + 100, this.camera.bounds.top + 10);
        this.createOvenButton.update(this.camera);
        this.createOvenButton.active = this.toolMode === 'create-oven';
        this.createSlicerButton.position = (0, vec_1.vec)(toolbarStart + 300 + 120, this.camera.bounds.top + 10);
        this.createSlicerButton.update(this.camera);
        this.createSlicerButton.active = this.toolMode === 'create-slicer';
        this.createGraterButton.position = (0, vec_1.vec)(toolbarStart + 350 + 140, this.camera.bounds.top + 10);
        this.createGraterButton.update(this.camera);
        this.createGraterButton.active = this.toolMode === 'create-grater';
        this.createRollerButton.position = (0, vec_1.vec)(toolbarStart + 400 + 160, this.camera.bounds.top + 10);
        this.createRollerButton.update(this.camera);
        this.createRollerButton.active = this.toolMode === 'create-roller';
        this.createBlenderButton.position = (0, vec_1.vec)(toolbarStart + 450 + 180, this.camera.bounds.top + 10);
        this.createBlenderButton.update(this.camera);
        this.createBlenderButton.active = this.toolMode === 'create-blender';
        this.helpButton.position = (0, vec_1.vec)(toolbarStart + 500 + 200, this.camera.bounds.top + 10);
        this.helpButton.update(this.camera);
        if (this.playing) {
            this.tickTimer += dt;
            if (this.tickTimer > GameScene.TICK_TIME) {
                this.factoryFloor.tick(this);
                this.tickTimer -= GameScene.TICK_TIME;
            }
        }
        this.factoryFloor.update(dt, this.camera, this.toolMode);
    }
    draw(context) {
        context.save();
        if (this.transitionState !== scene_manager_1.SceneTransitionState.None) {
            context.globalAlpha = this.transitionAmount;
        }
        const gradient = context.createLinearGradient(0, 0, 0, Game_1.default.screen.y);
        gradient.addColorStop(0, '#467b72');
        gradient.addColorStop(1, '#39655e');
        context.fillStyle = gradient;
        context.fillRect(0, 0, Game_1.default.screen.x, Game_1.default.screen.y);
        context.save();
        this.camera.draw(context, Game_1.default.screen.x, Game_1.default.screen.y);
        this.factoryFloor.draw(context, this.camera);
        this.playButton.draw(context);
        this.stepButton.draw(context);
        this.resetButton.draw(context);
        this.selectButton.draw(context);
        this.rotateButton.draw(context);
        this.deleteButton.draw(context);
        this.createConveyorButton.draw(context);
        this.createCombinerButton.draw(context);
        this.createOvenButton.draw(context);
        this.createSlicerButton.draw(context);
        this.createGraterButton.draw(context);
        this.createRollerButton.draw(context);
        this.createBlenderButton.draw(context);
        this.helpButton.draw(context);
        if (this.customers.length > 0) {
            this.customers[0].draw(context, this.camera);
        }
        context.restore();
        context.restore();
    }
}
exports.GameScene = GameScene;
GameScene.TRANSITION_TIME = 1;
GameScene.TICK_TIME = 1;
GameScene.TOOLBAR_WIDTH = 750;


/***/ }),

/***/ "./src/HelpScene.ts":
/*!**************************!*\
  !*** ./src/HelpScene.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HelpScene = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const input_manager_1 = __webpack_require__(/*! @basementuniverse/input-manager */ "./node_modules/@basementuniverse/input-manager/build/index.js");
const scene_manager_1 = __webpack_require__(/*! @basementuniverse/scene-manager */ "./node_modules/@basementuniverse/scene-manager/build/index.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Game_1 = __webpack_require__(/*! ./Game */ "./src/Game.ts");
class HelpScene extends scene_manager_1.Scene {
    constructor() {
        super({
            transitionTime: HelpScene.TRANSITION_TIME,
        });
    }
    initialise() { }
    update(dt) {
        if (input_manager_1.default.keyPressed()) {
            scene_manager_1.default.pop();
        }
    }
    draw(context) {
        context.save();
        if (this.transitionState !== scene_manager_1.SceneTransitionState.None) {
            context.globalAlpha = this.transitionAmount;
        }
        context.fillStyle = '#00000099';
        context.fillRect(0, 0, Game_1.default.screen.x, Game_1.default.screen.y);
        const center = vec_1.vec.mul(Game_1.default.screen, 0.5);
        const instructionsImage = content_manager_1.default.get('instructions');
        if (instructionsImage) {
            context.drawImage(instructionsImage, center.x - instructionsImage.width / 2, center.y - instructionsImage.height / 2, instructionsImage.width, instructionsImage.height);
        }
        context.restore();
    }
}
exports.HelpScene = HelpScene;
HelpScene.TRANSITION_TIME = 0.5;


/***/ }),

/***/ "./src/IntroScene.ts":
/*!***************************!*\
  !*** ./src/IntroScene.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntroScene = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const scene_manager_1 = __webpack_require__(/*! @basementuniverse/scene-manager */ "./node_modules/@basementuniverse/scene-manager/build/index.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Game_1 = __webpack_require__(/*! ./Game */ "./src/Game.ts");
const MenuScene_1 = __webpack_require__(/*! ./MenuScene */ "./src/MenuScene.ts");
const input_manager_1 = __webpack_require__(/*! @basementuniverse/input-manager */ "./node_modules/@basementuniverse/input-manager/build/index.js");
class IntroScene extends scene_manager_1.Scene {
    constructor() {
        super({
            transitionTime: IntroScene.TRANSITION_TIME,
        });
    }
    initialise() { }
    update(dt) {
        if (input_manager_1.default.keyPressed()) {
            scene_manager_1.default.pop();
            scene_manager_1.default.push(new MenuScene_1.MenuScene());
        }
    }
    draw(context) {
        context.save();
        if (this.transitionState !== scene_manager_1.SceneTransitionState.None) {
            context.globalAlpha = this.transitionAmount;
        }
        const teamLogo = content_manager_1.default.get('spknc');
        if (teamLogo) {
            const center = vec_1.vec.mul(Game_1.default.screen, 0.5);
            const logoSize = vec_1.vec.mul((0, vec_1.vec)(teamLogo.width, teamLogo.height), 0.4);
            context.drawImage(teamLogo, center.x - logoSize.x / 2, center.y - logoSize.y / 2, logoSize.x, logoSize.y);
        }
        context.restore();
    }
}
exports.IntroScene = IntroScene;
IntroScene.TRANSITION_TIME = 2;


/***/ }),

/***/ "./src/Item.ts":
/*!*********************!*\
  !*** ./src/Item.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Item = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
class Item {
    constructor(tags) {
        this.tags = [];
        this.tags = tags;
    }
    static clone(item) {
        return new Item([...item.tags]);
    }
    addTags(...tags) {
        this.tags = [...this.tags, ...tags];
    }
    removeTags(...tags) {
        this.tags = this.tags.filter(tag => !tags.includes(tag));
    }
    mergeTags(tagPostfix) {
        this.tags = this.tags.map(tag => `${tag}_${tagPostfix}`);
    }
    hasSomeTags(...tags) {
        return tags.some(tag => this.tags.includes(tag));
    }
    hasAllTags(...tags) {
        return tags.every(tag => this.tags.includes(tag));
    }
    draw(context, p, s) {
        var _a, _b;
        context.save();
        context.translate(p.x, p.y);
        let imageName = 'error';
        for (const { tags, asset } of Item.TAGS_TO_ASSETS) {
            if (tags.length === this.tags.length &&
                tags.every(tag => this.tags.includes(tag))) {
                imageName = asset;
                break;
            }
        }
        const image = content_manager_1.default.get(imageName);
        if (image) {
            context.drawImage(image, 0, 0, (_a = s === null || s === void 0 ? void 0 : s.x) !== null && _a !== void 0 ? _a : image.width, (_b = s === null || s === void 0 ? void 0 : s.y) !== null && _b !== void 0 ? _b : image.height);
        }
        context.restore();
    }
    debugOutput() {
        return `I(${this.tags.join(' ')})`;
    }
}
exports.Item = Item;
Item.TAGS_TO_ASSETS = [
    {
        tags: [
            'dough_rolled',
            'tomato_blended',
            'cheese_grated',
            'salami_sliced',
        ],
        asset: 'pizza_uncooked',
    },
    {
        tags: [
            'dough_rolled_cooked',
            'tomato_blended_cooked',
            'cheese_grated_cooked',
            'salami_sliced_cooked',
        ],
        asset: 'pizza_cooked',
    },
    {
        tags: ['dough'],
        asset: 'dough',
    },
    {
        tags: ['dough_rolled'],
        asset: 'dough_rolled',
    },
    {
        tags: ['cheese'],
        asset: 'cheese',
    },
    {
        tags: ['cheese_grated'],
        asset: 'cheese_grated',
    },
    {
        tags: ['tomato'],
        asset: 'tomato',
    },
    {
        tags: ['tomato_sliced'],
        asset: 'tomato_sliced',
    },
    {
        tags: ['tomato_blended'],
        asset: 'tomato_blended',
    },
    {
        tags: ['salami'],
        asset: 'salami',
    },
    {
        tags: ['salami_sliced'],
        asset: 'salami_sliced',
    },
    {
        tags: ['salami_sliced'],
        asset: 'salami_sliced',
    },
];


/***/ }),

/***/ "./src/LoadingScene.ts":
/*!*****************************!*\
  !*** ./src/LoadingScene.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoadingScene = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const scene_manager_1 = __webpack_require__(/*! @basementuniverse/scene-manager */ "./node_modules/@basementuniverse/scene-manager/build/index.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const content = __webpack_require__(/*! ../content/content.json */ "./content/content.json");
const Game_1 = __webpack_require__(/*! ./Game */ "./src/Game.ts");
const GameScene_1 = __webpack_require__(/*! ./GameScene */ "./src/GameScene.ts");
const IntroScene_1 = __webpack_require__(/*! ./IntroScene */ "./src/IntroScene.ts");
const constants = __webpack_require__(/*! ./constants */ "./src/constants.ts");
class LoadingScene extends scene_manager_1.Scene {
    constructor() {
        super({
            transitionTime: LoadingScene.TRANSITION_TIME,
        });
        this.cooldownTime = 0;
    }
    initialise() {
        this.finishedLoadingContent = false;
        this.progressBar = { position: (0, vec_1.vec)(), progress: 0 };
        this.cooldownTime = LoadingScene.COOLDOWN_TIME;
        content_manager_1.default.load(content)
            .then(() => {
            this.finishedLoadingContent = true;
        })
            .catch((error) => {
            constants.DEBUG && console.log(`Unable to load content: ${error}`);
        });
    }
    update(dt) {
        this.progressBar.position = (0, vec_1.vec)(Game_1.default.screen.x / 2 - 50, Game_1.default.screen.y / 2);
        this.progressBar.progress = content_manager_1.default.progress;
        if (this.finishedLoadingContent) {
            this.cooldownTime -= dt;
        }
        if (this.cooldownTime <= 0) {
            scene_manager_1.default.pop();
            if (constants.SKIP_MENU) {
                scene_manager_1.default.push(new GameScene_1.GameScene());
            }
            else {
                scene_manager_1.default.push(new IntroScene_1.IntroScene());
            }
        }
    }
    draw(context) {
        context.save();
        if (this.transitionState !== scene_manager_1.SceneTransitionState.None) {
            context.globalAlpha = this.transitionAmount;
        }
        context.fillStyle = 'white';
        context.fillRect(this.progressBar.position.x, this.progressBar.position.y, this.progressBar.progress * 100, 20);
        context.font = '16px monospace';
        context.fillText('Loading...', this.progressBar.position.x, this.progressBar.position.y - 10);
        context.restore();
    }
}
exports.LoadingScene = LoadingScene;
LoadingScene.TRANSITION_TIME = 0.5;
LoadingScene.COOLDOWN_TIME = 2.5;


/***/ }),

/***/ "./src/MenuScene.ts":
/*!**************************!*\
  !*** ./src/MenuScene.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MenuScene = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const input_manager_1 = __webpack_require__(/*! @basementuniverse/input-manager */ "./node_modules/@basementuniverse/input-manager/build/index.js");
const scene_manager_1 = __webpack_require__(/*! @basementuniverse/scene-manager */ "./node_modules/@basementuniverse/scene-manager/build/index.js");
const utils_1 = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Game_1 = __webpack_require__(/*! ./Game */ "./src/Game.ts");
const GameScene_1 = __webpack_require__(/*! ./GameScene */ "./src/GameScene.ts");
class MenuScene extends scene_manager_1.Scene {
    constructor() {
        super({
            transitionTime: MenuScene.TRANSITION_TIME,
        });
        this.music = null;
    }
    initialise() {
        const music = content_manager_1.default.get('intro-music');
        if (music) {
            this.music = music;
            this.music.loop = true;
            this.music.volume = 0.3;
            this.music.play();
        }
    }
    update(dt) {
        if (input_manager_1.default.keyPressed()) {
            if (this.music) {
                this.music.pause();
                this.music.currentTime = 0;
            }
            scene_manager_1.default.push(new GameScene_1.GameScene());
        }
    }
    draw(context) {
        context.save();
        if (this.transitionState !== scene_manager_1.SceneTransitionState.None) {
            context.globalAlpha = this.transitionAmount;
        }
        const center = vec_1.vec.mul(Game_1.default.screen, 0.5);
        const menuImage = content_manager_1.default.get('ff');
        if (menuImage) {
            context.drawImage(menuImage, center.x - menuImage.width / 2, center.y - menuImage.height / 2, menuImage.width, menuImage.height);
        }
        const titleImage = content_manager_1.default.get('title');
        if (titleImage) {
            const y1 = (0, utils_1.lerp)(-100, Game_1.default.screen.y * 0.3, this.transitionAmount);
            context.drawImage(titleImage, center.x - titleImage.width / 2, y1, titleImage.width, titleImage.height);
        }
        const y2 = (0, utils_1.lerp)(2500, Game_1.default.screen.y * 0.6, this.transitionAmount);
        context.fillStyle = 'white';
        context.font = '24px monospace';
        context.textAlign = 'center';
        context.fillText('Press a key to start', Game_1.default.screen.x / 2, y2);
        context.restore();
    }
}
exports.MenuScene = MenuScene;
MenuScene.TRANSITION_TIME = 1;


/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FPS_MIN = exports.SKIP_MENU = exports.DEBUG = void 0;
exports.DEBUG = true;
exports.SKIP_MENU = false;
exports.FPS_MIN = 1 / 30;


/***/ }),

/***/ "./src/machines/Blender.ts":
/*!*********************************!*\
  !*** ./src/machines/Blender.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Blender = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const utils_1 = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Item_1 = __webpack_require__(/*! ../Item */ "./src/Item.ts");
const Machine_1 = __webpack_require__(/*! ./Machine */ "./src/machines/Machine.ts");
class Blender extends Machine_1.Machine {
    constructor(data = {}) {
        super((0, utils_1.pluck)(data, 'position', 'direction'));
        this.blendingTime = 3;
        this.blendingProgress = 0;
        this.blendingItem = null;
        this.t = 0;
    }
    tick(factory) {
        const cloned = this.clone();
        cloned.status = 'idle';
        if (cloned.blendingItem) {
            if (cloned.blendingItem.hasSomeTags('dough', 'cooked')) {
                cloned.status = 'broken';
                return cloned;
            }
            cloned.status = 'working';
            cloned.blendingProgress += 1;
            if (cloned.blendingProgress >= cloned.blendingTime) {
                const blendedItem = Item_1.Item.clone(cloned.blendingItem);
                blendedItem.mergeTags('blended');
                cloned.outputItem = blendedItem;
                cloned.blendingItem = null;
                cloned.blendingProgress = 0;
            }
        }
        const inputMachine = factory.findAdjacentMachine(cloned.position, factory.adjustDirection(cloned.direction, cloned.input));
        if (inputMachine && inputMachine.outputItem && !cloned.blendingItem) {
            cloned.blendingItem = inputMachine.take(factory);
        }
        return cloned;
    }
    reset() {
        return new Blender(this);
    }
    clone() {
        const cloned = new Blender(this);
        cloned.blendingTime = this.blendingTime;
        cloned.blendingProgress = this.blendingProgress;
        cloned.blendingItem = this.blendingItem;
        return cloned;
    }
    update(dt) {
        this.t += dt;
    }
    draw(context, size) {
        context.save();
        context.translate(this.position.x * size, this.position.y * size);
        const p = (0, vec_1.vec)(0, 0);
        if (this.status === 'working') {
            p.x =
                Math.sin(this.t * Blender.WORKING_JITTER_FREQUENCY) *
                    Blender.WORKING_JITTER_AMPLITUDE;
            p.y =
                Math.cos(this.t * Blender.WORKING_JITTER_FREQUENCY) *
                    Blender.WORKING_JITTER_AMPLITUDE;
        }
        let image = undefined;
        switch (this.direction) {
            case 'left':
                image = content_manager_1.default.get('blender-left');
                break;
            case 'right':
                image = content_manager_1.default.get('blender-right');
                break;
            case 'up':
                image = content_manager_1.default.get('blender-up');
                break;
            case 'down':
                image = content_manager_1.default.get('blender-down');
                break;
        }
        if (image) {
            context.drawImage(image, p.x, p.y, size, size);
        }
        if (this.status === 'broken') {
            const brokenImage = content_manager_1.default.get('machine-broken');
            if (brokenImage) {
                context.drawImage(brokenImage, 0, 0, size, size);
            }
        }
        if (this.blendingItem) {
            this.blendingItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        if (this.outputItem) {
            this.outputItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        context.restore();
    }
    debugOutput() {
        var _a;
        const blendingItem = ((_a = this.blendingItem) === null || _a === void 0 ? void 0 : _a.debugOutput()) || '-';
        return `BLN${super.debugOutput()}(${blendingItem}:${this.blendingProgress}/${this.blendingTime})`;
    }
}
exports.Blender = Blender;
Blender.WORKING_JITTER_FREQUENCY = 15;
Blender.WORKING_JITTER_AMPLITUDE = 2;


/***/ }),

/***/ "./src/machines/Combiner.ts":
/*!**********************************!*\
  !*** ./src/machines/Combiner.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Combiner = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const utils_1 = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Item_1 = __webpack_require__(/*! ../Item */ "./src/Item.ts");
const Machine_1 = __webpack_require__(/*! ./Machine */ "./src/machines/Machine.ts");
class Combiner extends Machine_1.Machine {
    constructor(data = {}) {
        super((0, utils_1.pluck)(data, 'position', 'direction'));
        this.inputs = ['left', 'right', 'back'];
        this.combiningItemA = null;
        this.combiningItemB = null;
        if (data.inputs) {
            this.inputs = data.inputs;
        }
    }
    tick(factory) {
        const cloned = this.clone();
        if (cloned.combiningItemA && cloned.combiningItemB) {
            const combinedItem = Item_1.Item.clone(cloned.combiningItemA);
            combinedItem.addTags(...cloned.combiningItemB.tags);
            cloned.outputItem = combinedItem;
            cloned.combiningItemA = null;
            cloned.combiningItemB = null;
        }
        for (const input of cloned.inputs) {
            const inputMachine = factory.findAdjacentMachine(cloned.position, factory.adjustDirection(cloned.direction, input));
            if (inputMachine && inputMachine.outputItem) {
                if (!cloned.combiningItemA) {
                    cloned.combiningItemA = inputMachine.take(factory);
                }
                else if (!cloned.combiningItemB) {
                    cloned.combiningItemB = inputMachine.take(factory);
                }
            }
        }
        return cloned;
    }
    reset() {
        return new Combiner({
            ...this,
            inputs: this.inputs,
        });
    }
    clone() {
        const cloned = new Combiner(this);
        cloned.inputs = this.inputs;
        cloned.combiningItemA = this.combiningItemA;
        cloned.combiningItemB = this.combiningItemB;
        return cloned;
    }
    update(dt) { }
    draw(context, size) {
        context.save();
        context.translate(this.position.x * size, this.position.y * size);
        let image = undefined;
        switch (this.direction) {
            case 'left':
                image = content_manager_1.default.get('combiner-left');
                break;
            case 'right':
                image = content_manager_1.default.get('combiner-right');
                break;
            case 'up':
                image = content_manager_1.default.get('combiner-up');
                break;
            case 'down':
                image = content_manager_1.default.get('combiner-down');
                break;
        }
        if (image) {
            context.drawImage(image, 0, 0, size, size);
        }
        if (this.combiningItemA) {
            this.combiningItemA.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        if (this.combiningItemB) {
            this.combiningItemB.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        if (this.outputItem) {
            this.outputItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        context.restore();
    }
    debugOutput() {
        var _a, _b;
        const combiningItemA = ((_a = this.combiningItemA) === null || _a === void 0 ? void 0 : _a.debugOutput()) || '-';
        const combiningItemB = ((_b = this.combiningItemB) === null || _b === void 0 ? void 0 : _b.debugOutput()) || '-';
        return `CMB${super.debugOutput()}(${combiningItemA}+${combiningItemB})`;
    }
}
exports.Combiner = Combiner;


/***/ }),

/***/ "./src/machines/Conveyor.ts":
/*!**********************************!*\
  !*** ./src/machines/Conveyor.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Conveyor = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Machine_1 = __webpack_require__(/*! ./Machine */ "./src/machines/Machine.ts");
class Conveyor extends Machine_1.Machine {
    constructor(data = {}) {
        if (data.input === 'front') {
            throw new Error('conveyor input cannot be facing front');
        }
        super({
            position: data.position,
            direction: data.output || 'right',
            input: data.input || 'back',
        });
    }
    tick(factory) {
        const cloned = this.clone();
        const inputMachine = factory.findAdjacentMachine(cloned.position, factory.adjustDirection(cloned.direction, cloned.input));
        if (inputMachine && inputMachine.outputItem && !cloned.outputItem) {
            cloned.outputItem = inputMachine.take(factory);
        }
        return cloned;
    }
    reset() {
        return new Conveyor({
            position: this.position,
            input: this.input,
            output: this.direction,
        });
    }
    clone() {
        const cloned = new Conveyor({
            position: this.position,
            input: this.input,
            output: this.direction,
        });
        cloned.outputItem = this.outputItem;
        return cloned;
    }
    update(dt) { }
    draw(context, size) {
        context.save();
        context.translate(this.position.x * size, this.position.y * size);
        let image = undefined;
        switch (this.direction) {
            case 'left':
                switch (this.input) {
                    case 'left':
                        image = content_manager_1.default.get('conveyor-up-left');
                        break;
                    case 'right':
                        image = content_manager_1.default.get('conveyor-down-left');
                        break;
                    case 'back':
                        image = content_manager_1.default.get('conveyor-left');
                        break;
                }
                break;
            case 'right':
                switch (this.input) {
                    case 'left':
                        image = content_manager_1.default.get('conveyor-down-right');
                        break;
                    case 'right':
                        image = content_manager_1.default.get('conveyor-up-right');
                        break;
                    case 'back':
                        image = content_manager_1.default.get('conveyor-right');
                        break;
                }
                break;
            case 'up':
                switch (this.input) {
                    case 'left':
                        image = content_manager_1.default.get('conveyor-right-up');
                        break;
                    case 'right':
                        image = content_manager_1.default.get('conveyor-left-up');
                        break;
                    case 'back':
                        image = content_manager_1.default.get('conveyor-up');
                        break;
                }
                break;
            case 'down':
                switch (this.input) {
                    case 'left':
                        image = content_manager_1.default.get('conveyor-right-down');
                        break;
                    case 'right':
                        image = content_manager_1.default.get('conveyor-left-down');
                        break;
                    case 'back':
                        image = content_manager_1.default.get('conveyor-down');
                        break;
                }
                break;
        }
        if (image) {
            context.drawImage(image, 0, 0, size, size);
        }
        if (this.outputItem) {
            this.outputItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        context.restore();
    }
    debugOutput() {
        return `CNV${super.debugOutput()}`;
    }
}
exports.Conveyor = Conveyor;
Conveyor.ROTATIONS = [
    'right_left',
    'right_right',
    'right_back',
    'down_left',
    'down_right',
    'down_back',
    'left_left',
    'left_right',
    'left_back',
    'up_left',
    'up_right',
    'up_back',
];


/***/ }),

/***/ "./src/machines/Dispenser.ts":
/*!***********************************!*\
  !*** ./src/machines/Dispenser.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dispenser = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const utils_1 = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Item_1 = __webpack_require__(/*! ../Item */ "./src/Item.ts");
const Machine_1 = __webpack_require__(/*! ./Machine */ "./src/machines/Machine.ts");
class Dispenser extends Machine_1.Machine {
    constructor(data = {}) {
        super((0, utils_1.pluck)(data, 'position', 'direction'));
        this.item = null;
        this.item = data.item || null;
    }
    tick(factory, dispense) {
        const cloned = this.clone();
        if (!cloned.item) {
            return cloned;
        }
        if (!cloned.outputItem && dispense) {
            cloned.outputItem = Item_1.Item.clone(cloned.item);
        }
        return cloned;
    }
    reset() {
        return new Dispenser(this);
    }
    clone() {
        return new Dispenser(this);
    }
    update(dt) { }
    draw(context, size) {
        context.save();
        context.translate(this.position.x * size, this.position.y * size);
        let image = content_manager_1.default.get('dispenser');
        if (image) {
            context.drawImage(image, 0, 0, size, size);
        }
        if (this.item) {
            this.item.draw(context, (0, vec_1.vec)(size * 0.75, size * 0.08), vec_1.vec.mul((0, vec_1.vec)(size), 0.18));
        }
        if (this.outputItem) {
            this.outputItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        context.restore();
    }
    debugOutput() {
        return `DSP${super.debugOutput()}`;
    }
}
exports.Dispenser = Dispenser;
Dispenser.ROTATIONS = ['down'];


/***/ }),

/***/ "./src/machines/Grater.ts":
/*!********************************!*\
  !*** ./src/machines/Grater.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Grater = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const utils_1 = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Item_1 = __webpack_require__(/*! ../Item */ "./src/Item.ts");
const Machine_1 = __webpack_require__(/*! ./Machine */ "./src/machines/Machine.ts");
class Grater extends Machine_1.Machine {
    constructor(data = {}) {
        super((0, utils_1.pluck)(data, 'position', 'direction'));
        this.gratingTime = 2;
        this.gratingProgress = 0;
        this.gratingItem = null;
        this.t = 0;
    }
    tick(factory) {
        const cloned = this.clone();
        cloned.status = 'idle';
        if (cloned.gratingItem) {
            cloned.status = 'working';
            cloned.gratingProgress += 1;
            if (cloned.gratingProgress >= cloned.gratingTime) {
                const gratedItem = Item_1.Item.clone(cloned.gratingItem);
                gratedItem.mergeTags('grated');
                cloned.outputItem = gratedItem;
                cloned.gratingItem = null;
                cloned.gratingProgress = 0;
            }
        }
        const inputMachine = factory.findAdjacentMachine(cloned.position, factory.adjustDirection(cloned.direction, cloned.input));
        if (inputMachine && inputMachine.outputItem && !cloned.gratingItem) {
            cloned.gratingItem = inputMachine.take(factory);
        }
        return cloned;
    }
    reset() {
        return new Grater(this);
    }
    clone() {
        const cloned = new Grater(this);
        cloned.gratingTime = this.gratingTime;
        cloned.gratingProgress = this.gratingProgress;
        cloned.gratingItem = this.gratingItem;
        return cloned;
    }
    update(dt) {
        this.t += dt;
    }
    draw(context, size) {
        context.save();
        context.translate(this.position.x * size, this.position.y * size);
        const p = (0, vec_1.vec)(0, 0);
        if (this.status === 'working') {
            p.x =
                Math.sin(this.t * Grater.WORKING_JITTER_FREQUENCY) *
                    Grater.WORKING_JITTER_AMPLITUDE;
            p.y =
                Math.cos(this.t * Grater.WORKING_JITTER_FREQUENCY) *
                    Grater.WORKING_JITTER_AMPLITUDE;
        }
        let image = undefined;
        switch (this.direction) {
            case 'left':
                image = content_manager_1.default.get('grater-left');
                break;
            case 'right':
                image = content_manager_1.default.get('grater-right');
                break;
            case 'up':
                image = content_manager_1.default.get('grater-up');
                break;
            case 'down':
                image = content_manager_1.default.get('grater-down');
                break;
        }
        if (image) {
            context.drawImage(image, p.x, p.y, size, size);
        }
        if (this.gratingItem) {
            this.gratingItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        if (this.outputItem) {
            this.outputItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        context.restore();
    }
    debugOutput() {
        var _a;
        const gratingItem = ((_a = this.gratingItem) === null || _a === void 0 ? void 0 : _a.debugOutput()) || '-';
        return `GRT${super.debugOutput()}(${gratingItem}:${this.gratingProgress}/${this.gratingTime})`;
    }
}
exports.Grater = Grater;
Grater.WORKING_JITTER_FREQUENCY = 15;
Grater.WORKING_JITTER_AMPLITUDE = 2;


/***/ }),

/***/ "./src/machines/Machine.ts":
/*!*********************************!*\
  !*** ./src/machines/Machine.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Machine = void 0;
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
class Machine {
    constructor(data = {}) {
        this.position = (0, vec_1.vec)(0, 0);
        this.direction = 'right';
        this.input = 'back';
        this.output = 'front';
        this.outputItem = null;
        this.status = 'idle';
        Object.assign(this, data);
    }
    take(factory) {
        const item = this.outputItem;
        this.outputItem = null;
        const found = factory.newState.find(machine => vec_1.vec.eq(machine.position, this.position));
        if (found) {
            found.outputItem = null;
        }
        return item;
    }
    debugOutput() {
        return `(${this.status}|${this.outputItem ? this.outputItem.debugOutput() : '-'})`;
    }
}
exports.Machine = Machine;
Machine.ROTATIONS = ['right', 'down', 'left', 'up'];


/***/ }),

/***/ "./src/machines/Oven.ts":
/*!******************************!*\
  !*** ./src/machines/Oven.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Oven = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const utils_1 = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Item_1 = __webpack_require__(/*! ../Item */ "./src/Item.ts");
const Machine_1 = __webpack_require__(/*! ./Machine */ "./src/machines/Machine.ts");
class Oven extends Machine_1.Machine {
    constructor(data = {}) {
        super((0, utils_1.pluck)(data, 'position', 'direction'));
        this.cookingTime = 2;
        this.cookingProgress = 0;
        this.cookingItem = null;
        this.t = 0;
    }
    tick(factory) {
        const cloned = this.clone();
        cloned.status = 'idle';
        if (cloned.cookingItem) {
            cloned.status = 'working';
            cloned.cookingProgress += 1;
            if (cloned.cookingProgress >= cloned.cookingTime) {
                const cookedItem = Item_1.Item.clone(cloned.cookingItem);
                cookedItem.mergeTags('cooked');
                cloned.outputItem = cookedItem;
                cloned.cookingItem = null;
                cloned.cookingProgress = 0;
            }
        }
        const inputMachine = factory.findAdjacentMachine(cloned.position, factory.adjustDirection(cloned.direction, cloned.input));
        if (inputMachine && inputMachine.outputItem && !cloned.cookingItem) {
            cloned.cookingItem = inputMachine.take(factory);
        }
        return cloned;
    }
    reset() {
        return new Oven(this);
    }
    clone() {
        const cloned = new Oven(this);
        cloned.cookingTime = this.cookingTime;
        cloned.cookingProgress = this.cookingProgress;
        cloned.cookingItem = this.cookingItem;
        return cloned;
    }
    update(dt) {
        this.t += dt;
    }
    draw(context, size) {
        context.save();
        context.translate(this.position.x * size, this.position.y * size);
        let s = 0;
        if (this.status === 'working') {
            s =
                Math.sin(this.t * Oven.WORKING_JITTER_FREQUENCY) *
                    Oven.WORKING_JITTER_AMPLITUDE;
        }
        let image = undefined;
        switch (this.direction) {
            case 'left':
                image = content_manager_1.default.get('oven-left');
                break;
            case 'right':
                image = content_manager_1.default.get('oven-right');
                break;
            case 'up':
                image = content_manager_1.default.get('oven-up');
                break;
            case 'down':
                image = content_manager_1.default.get('oven-down');
                break;
        }
        if (image) {
            context.drawImage(image, -s, -s, size + s, size + s);
        }
        if (this.cookingItem) {
            this.cookingItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        if (this.outputItem) {
            this.outputItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        context.restore();
    }
    debugOutput() {
        var _a;
        const cookingItem = ((_a = this.cookingItem) === null || _a === void 0 ? void 0 : _a.debugOutput()) || '-';
        return `OVN${super.debugOutput()}(${cookingItem}:${this.cookingProgress}/${this.cookingTime})`;
    }
}
exports.Oven = Oven;
Oven.WORKING_JITTER_FREQUENCY = 2;
Oven.WORKING_JITTER_AMPLITUDE = 2;


/***/ }),

/***/ "./src/machines/Roller.ts":
/*!********************************!*\
  !*** ./src/machines/Roller.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Roller = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const utils_1 = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Item_1 = __webpack_require__(/*! ../Item */ "./src/Item.ts");
const Machine_1 = __webpack_require__(/*! ./Machine */ "./src/machines/Machine.ts");
class Roller extends Machine_1.Machine {
    constructor(data = {}) {
        super((0, utils_1.pluck)(data, 'position', 'direction'));
        this.rollingTime = 2;
        this.rollingProgress = 0;
        this.rollingItem = null;
        this.t = 0;
    }
    tick(factory) {
        const cloned = this.clone();
        cloned.status = 'idle';
        if (cloned.rollingItem) {
            cloned.status = 'working';
            cloned.rollingProgress += 1;
            if (cloned.rollingProgress >= cloned.rollingTime) {
                const gratedItem = Item_1.Item.clone(cloned.rollingItem);
                gratedItem.mergeTags('rolled');
                cloned.outputItem = gratedItem;
                cloned.rollingItem = null;
                cloned.rollingProgress = 0;
            }
        }
        const inputMachine = factory.findAdjacentMachine(cloned.position, factory.adjustDirection(cloned.direction, cloned.input));
        if (inputMachine && inputMachine.outputItem && !cloned.rollingItem) {
            cloned.rollingItem = inputMachine.take(factory);
        }
        return cloned;
    }
    reset() {
        return new Roller(this);
    }
    clone() {
        const cloned = new Roller(this);
        cloned.rollingTime = this.rollingTime;
        cloned.rollingProgress = this.rollingProgress;
        cloned.rollingItem = this.rollingItem;
        return cloned;
    }
    update(dt) {
        this.t += dt;
    }
    draw(context, size) {
        context.save();
        context.translate(this.position.x * size, this.position.y * size);
        const p = (0, vec_1.vec)(0, 0);
        if (this.status === 'working') {
            p.x =
                Math.sin(this.t * Roller.WORKING_JITTER_FREQUENCY) *
                    Roller.WORKING_JITTER_AMPLITUDE;
            p.y =
                Math.cos(this.t * Roller.WORKING_JITTER_FREQUENCY) *
                    Roller.WORKING_JITTER_AMPLITUDE;
        }
        let image = undefined;
        switch (this.direction) {
            case 'left':
                image = content_manager_1.default.get('roller-left');
                break;
            case 'right':
                image = content_manager_1.default.get('roller-right');
                break;
            case 'up':
                image = content_manager_1.default.get('roller-up');
                break;
            case 'down':
                image = content_manager_1.default.get('roller-down');
                break;
        }
        if (image) {
            context.drawImage(image, p.x, p.y, size, size);
        }
        if (this.rollingItem) {
            this.rollingItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        if (this.outputItem) {
            this.outputItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        context.restore();
    }
    debugOutput() {
        var _a;
        const rollingItem = ((_a = this.rollingItem) === null || _a === void 0 ? void 0 : _a.debugOutput()) || '-';
        return `ROL${super.debugOutput()}(${rollingItem}:${this.rollingProgress}/${this.rollingTime})`;
    }
}
exports.Roller = Roller;
Roller.WORKING_JITTER_FREQUENCY = 15;
Roller.WORKING_JITTER_AMPLITUDE = 2;


/***/ }),

/***/ "./src/machines/ServingCounter.ts":
/*!****************************************!*\
  !*** ./src/machines/ServingCounter.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServingCounter = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const utils_1 = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Machine_1 = __webpack_require__(/*! ./Machine */ "./src/machines/Machine.ts");
class ServingCounter extends Machine_1.Machine {
    constructor(data = {}) {
        super((0, utils_1.pluck)(data, 'position', 'direction'));
        this.expectedItem = null;
        this.expectedItem = data.expectedItem || null;
    }
    tick(factory) {
        const cloned = this.clone();
        const inputMachine = factory.findAdjacentMachine(cloned.position, factory.adjustDirection(this.direction, this.input));
        if (inputMachine && inputMachine.outputItem && !cloned.outputItem) {
            cloned.outputItem = inputMachine.take(factory);
        }
        if (cloned.outputItem) {
            console.log('item: ', cloned.outputItem);
            console.log('expected: ', cloned.expectedItem);
            console.log('valid: ', cloned.isValidOrder() ? 'yes' : 'no');
            factory.servingCounterValid = cloned.isValidOrder();
        }
        else {
            factory.servingCounterValid = null;
        }
        return cloned;
    }
    reset() {
        return new ServingCounter(this);
    }
    clone() {
        const cloned = new ServingCounter(this);
        cloned.expectedItem = this.expectedItem;
        cloned.outputItem = this.outputItem;
        return cloned;
    }
    isValidOrder() {
        if (!this.expectedItem) {
            return false;
        }
        if (!this.outputItem) {
            return false;
        }
        return (this.expectedItem.tags.length === this.outputItem.tags.length &&
            this.expectedItem.tags.every(tag => this.outputItem.tags.includes(tag)));
    }
    calculateScore() {
    }
    update(dt) { }
    draw(context, size) {
        context.save();
        context.translate(this.position.x * size, this.position.y * size);
        let image = content_manager_1.default.get('serving-counter');
        if (image) {
            context.drawImage(image, 0, 0, size, size);
        }
        if (this.outputItem) {
            this.outputItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.2), vec_1.vec.mul((0, vec_1.vec)(size), 0.6));
        }
        context.restore();
    }
    debugOutput() {
        return `SVC${super.debugOutput()}`;
    }
}
exports.ServingCounter = ServingCounter;


/***/ }),

/***/ "./src/machines/Slicer.ts":
/*!********************************!*\
  !*** ./src/machines/Slicer.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Slicer = void 0;
const content_manager_1 = __webpack_require__(/*! @basementuniverse/content-manager */ "./node_modules/@basementuniverse/content-manager/build/index.js");
const utils_1 = __webpack_require__(/*! @basementuniverse/utils */ "./node_modules/@basementuniverse/utils/utils.js");
const vec_1 = __webpack_require__(/*! @basementuniverse/vec */ "./node_modules/@basementuniverse/vec/vec.js");
const Item_1 = __webpack_require__(/*! ../Item */ "./src/Item.ts");
const Machine_1 = __webpack_require__(/*! ./Machine */ "./src/machines/Machine.ts");
class Slicer extends Machine_1.Machine {
    constructor(data = {}) {
        super((0, utils_1.pluck)(data, 'position', 'direction'));
        this.slicingTime = 1;
        this.slicingProgress = 0;
        this.slicingItem = null;
        this.t = 0;
    }
    tick(factory) {
        const cloned = this.clone();
        cloned.status = 'idle';
        if (cloned.slicingItem) {
            cloned.status = 'working';
            cloned.slicingProgress += 1;
            if (cloned.slicingProgress >= cloned.slicingTime) {
                const slicedItem = Item_1.Item.clone(cloned.slicingItem);
                slicedItem.mergeTags('sliced');
                cloned.outputItem = slicedItem;
                cloned.slicingItem = null;
                cloned.slicingProgress = 0;
            }
        }
        const inputMachine = factory.findAdjacentMachine(cloned.position, factory.adjustDirection(cloned.direction, cloned.input));
        if (inputMachine && inputMachine.outputItem && !cloned.slicingItem) {
            cloned.slicingItem = inputMachine.take(factory);
        }
        return cloned;
    }
    reset() {
        return new Slicer(this);
    }
    clone() {
        const cloned = new Slicer(this);
        cloned.slicingTime = this.slicingTime;
        cloned.slicingProgress = this.slicingProgress;
        cloned.slicingItem = this.slicingItem;
        return cloned;
    }
    update(dt) {
        this.t += dt;
    }
    draw(context, size) {
        context.save();
        context.translate(this.position.x * size, this.position.y * size);
        const p = (0, vec_1.vec)(0, 0);
        if (this.status === 'working') {
            p.x =
                Math.sin(this.t * Slicer.WORKING_JITTER_FREQUENCY) *
                    Slicer.WORKING_JITTER_AMPLITUDE;
            p.y =
                Math.cos(this.t * Slicer.WORKING_JITTER_FREQUENCY) *
                    Slicer.WORKING_JITTER_AMPLITUDE;
        }
        let image = undefined;
        switch (this.direction) {
            case 'left':
                image = content_manager_1.default.get('slicer-left');
                break;
            case 'right':
                image = content_manager_1.default.get('slicer-right');
                break;
            case 'up':
                image = content_manager_1.default.get('slicer-up');
                break;
            case 'down':
                image = content_manager_1.default.get('slicer-down');
                break;
        }
        if (image) {
            context.drawImage(image, p.x, p.y, size, size);
        }
        if (this.slicingItem) {
            this.slicingItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        if (this.outputItem) {
            this.outputItem.draw(context, vec_1.vec.mul((0, vec_1.vec)(size), 0.35), vec_1.vec.mul((0, vec_1.vec)(size), 0.4));
        }
        context.restore();
    }
    debugOutput() {
        var _a;
        const slicingItem = ((_a = this.slicingItem) === null || _a === void 0 ? void 0 : _a.debugOutput()) || '-';
        return `SLC${super.debugOutput()}(${slicingItem}:${this.slicingProgress}/${this.slicingTime})`;
    }
}
exports.Slicer = Slicer;
Slicer.WORKING_JITTER_FREQUENCY = 15;
Slicer.WORKING_JITTER_AMPLITUDE = 2;


/***/ }),

/***/ "./src/utilities.ts":
/*!**************************!*\
  !*** ./src/utilities.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.intersectPointAABB = exports.boundsMargin = void 0;
function boundsMargin(bounds, margin = 0) {
    return {
        left: bounds.left - margin,
        right: bounds.right + margin,
        top: bounds.top - margin,
        bottom: bounds.bottom + margin,
    };
}
exports.boundsMargin = boundsMargin;
function intersectPointAABB(point, bounds) {
    return (point.x >= bounds.left &&
        point.x <= bounds.right &&
        point.y >= bounds.top &&
        point.y <= bounds.bottom);
}
exports.intersectPointAABB = intersectPointAABB;


/***/ }),

/***/ "./content/content.json":
/*!******************************!*\
  !*** ./content/content.json ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('[{"name":"spknc","type":"image","args":["content/space-pirate-keyboard-ninja-cat.png"]},{"name":"ff","type":"image","args":["content/food-factory.png"]},{"name":"title","type":"image","args":["content/food-factory-title.png"]},{"name":"intro-music","type":"audio","args":["content/music/intro-music.mp3"]},{"name":"game-music","type":"audio","args":["content/music/game-music.mp3"]},{"name":"button-sound","type":"audio","args":["content/sounds/button.wav"]},{"name":"place-sound","type":"audio","args":["content/sounds/place.wav"]},{"name":"destroy-sound","type":"audio","args":["content/sounds/destroy.wav"]},{"name":"win-sound","type":"audio","args":["content/sounds/win.mp3"]},{"name":"lose-sound","type":"audio","args":["content/sounds/lose.mp3"]},{"name":"customer-waiting","type":"image","args":["content/customers/customer-waiting.png"]},{"name":"customer-happy","type":"image","args":["content/customers/customer-happy.png"]},{"name":"customer-angry","type":"image","args":["content/customers/customer-angry.png"]},{"name":"speech-bubble","type":"image","args":["content/speech-bubble.png"]},{"name":"machine-broken","type":"image","args":["content/machines/broken.png"]},{"name":"instructions","type":"image","args":["content/instructions.png"]},{"name":"blender-left","type":"image","args":["content/machines/blender-left.png"]},{"name":"blender-right","type":"image","args":["content/machines/blender-right.png"]},{"name":"blender-up","type":"image","args":["content/machines/blender-up.png"]},{"name":"blender-down","type":"image","args":["content/machines/blender-down.png"]},{"name":"conveyor-down","type":"image","args":["content/machines/conveyor-down.png"]},{"name":"conveyor-down-left","type":"image","args":["content/machines/conveyor-down-left.png"]},{"name":"conveyor-down-right","type":"image","args":["content/machines/conveyor-down-right.png"]},{"name":"conveyor-left","type":"image","args":["content/machines/conveyor-left.png"]},{"name":"conveyor-left-down","type":"image","args":["content/machines/conveyor-left-down.png"]},{"name":"conveyor-left-up","type":"image","args":["content/machines/conveyor-left-up.png"]},{"name":"conveyor-right","type":"image","args":["content/machines/conveyor-right.png"]},{"name":"conveyor-right-down","type":"image","args":["content/machines/conveyor-right-down.png"]},{"name":"conveyor-right-up","type":"image","args":["content/machines/conveyor-right-up.png"]},{"name":"conveyor-up","type":"image","args":["content/machines/conveyor-up.png"]},{"name":"conveyor-up-left","type":"image","args":["content/machines/conveyor-up-left.png"]},{"name":"conveyor-up-right","type":"image","args":["content/machines/conveyor-up-right.png"]},{"name":"combiner-left","type":"image","args":["content/machines/combiner-left.png"]},{"name":"combiner-right","type":"image","args":["content/machines/combiner-right.png"]},{"name":"combiner-up","type":"image","args":["content/machines/combiner-up.png"]},{"name":"combiner-down","type":"image","args":["content/machines/combiner-down.png"]},{"name":"dispenser","type":"image","args":["content/machines/dispenser.png"]},{"name":"grater-left","type":"image","args":["content/machines/grater-left.png"]},{"name":"grater-right","type":"image","args":["content/machines/grater-right.png"]},{"name":"grater-up","type":"image","args":["content/machines/grater-up.png"]},{"name":"grater-down","type":"image","args":["content/machines/grater-down.png"]},{"name":"oven-left","type":"image","args":["content/machines/oven-left.png"]},{"name":"oven-right","type":"image","args":["content/machines/oven-right.png"]},{"name":"oven-up","type":"image","args":["content/machines/oven-up.png"]},{"name":"oven-down","type":"image","args":["content/machines/oven-down.png"]},{"name":"roller-left","type":"image","args":["content/machines/roller-left.png"]},{"name":"roller-right","type":"image","args":["content/machines/roller-right.png"]},{"name":"roller-up","type":"image","args":["content/machines/roller-up.png"]},{"name":"roller-down","type":"image","args":["content/machines/roller-down.png"]},{"name":"slicer-left","type":"image","args":["content/machines/slicer-left.png"]},{"name":"slicer-right","type":"image","args":["content/machines/slicer-right.png"]},{"name":"slicer-up","type":"image","args":["content/machines/slicer-up.png"]},{"name":"slicer-down","type":"image","args":["content/machines/slicer-down.png"]},{"name":"serving-counter","type":"image","args":["content/machines/serving-counter.png"]},{"name":"select","type":"image","args":["content/pointer.png"]},{"name":"rotate","type":"image","args":["content/rotate.png"]},{"name":"delete","type":"image","args":["content/bin.png"]},{"name":"help","type":"image","args":["content/help.png"]},{"name":"error","type":"image","args":["content/error.png"]},{"name":"dough","type":"image","args":["content/items/dough.png"]},{"name":"dough_rolled","type":"image","args":["content/items/dough_rolled.png"]},{"name":"salami","type":"image","args":["content/items/salami.png"]},{"name":"salami_sliced","type":"image","args":["content/items/salami_sliced.png"]},{"name":"tomato","type":"image","args":["content/items/tomato.png"]},{"name":"tomato_sliced","type":"image","args":["content/items/tomato_sliced.png"]},{"name":"tomato_blended","type":"image","args":["content/items/tomato_blended.png"]},{"name":"cheese","type":"image","args":["content/items/cheese.png"]},{"name":"cheese_grated","type":"image","args":["content/items/cheese_grated.png"]},{"name":"tupperware","type":"image","args":["content/items/tupperware.png"]},{"name":"pizza_uncooked","type":"image","args":["content/items/pizza_uncooked.png"]},{"name":"pizza_cooked","type":"image","args":["content/items/pizza_cooked.png"]}]');

/***/ }),

/***/ "./src/config.json":
/*!*************************!*\
  !*** ./src/config.json ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"title":"Food Factory","showFPS":true}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const Game_1 = __webpack_require__(/*! ./Game */ "./src/Game.ts");
window.onload = () => {
    const game = new Game_1.default(document.querySelector('#game'));
    game.initialise();
};

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,